<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alex Jover</title>
  
  <subtitle>Software &amp; javascript tips and tricks!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://alexjoverm.github.io/"/>
  <updated>2017-11-21T06:41:48.000Z</updated>
  <id>http://alexjoverm.github.io/</id>
  
  <author>
    <name>Alex Jover Morales</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>1 year organising Alicante Frontend</title>
    <link href="http://alexjoverm.github.io/2017/11/21/1-year-organising-Alicante-Frontend/"/>
    <id>http://alexjoverm.github.io/2017/11/21/1-year-organising-Alicante-Frontend/</id>
    <published>2017-11-21T09:46:07.000Z</published>
    <updated>2017-11-21T06:41:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>Here are my insights about organising Alicante Frontend’s meetup after a year.</p><a id="more"></a><img src="/2017/11/21/1-year-organising-Alicante-Frontend/birthday.png" alt="First birthday of Alicante Frontend" title="First birthday of Alicante Frontend"><p>One year ago, <a href="https://twitter.com/aarongarciah" target="_blank" rel="external">Aaron</a>, <a href="https://twitter.com/AlvYuste" target="_blank" rel="external">Alvaro</a> and I started this amazing ride together. It’s been a year of meeting lots of people and having lots of fun. Satisfaction, success and happiness are the words that come to my mind when I think of <a href="http://alicantefrontend.es/" target="_blank" rel="external">Alicante Frontend</a>.</p><p>At the beginning, we were not sure about this success. Unlike bigger cities, Alicante didn’t have much community, apparently. Similar meetups from cities around had a stable 20-30 RSVP average. Still, we decided to make it happen even expecting less than 20 people attending.</p><p>Nowadays, it’s a pretty cool community that had a great variety of events, surpassing 100+ RSVP and having international events. We’ve had all kind of fun stuff, such as raffles and food&amp;drinks networking. You can find us on the following channels:</p><ul><li><a href="https://www.meetup.com/preview/Alicante-Frontend" target="_blank" rel="external">Meetup</a></li><li><a href="http://alicantefrontend.herokuapp.com/" target="_blank" rel="external">Slack</a></li><li><a href="https://twitter.com/AlicanteFront" target="_blank" rel="external">Twitter</a></li></ul><h2 id="What’s-Alicante-Frontend-made-of"><a href="#What’s-Alicante-Frontend-made-of" class="headerlink" title="What’s Alicante Frontend made of?"></a>What’s Alicante Frontend made of?</h2><p>First of all, we needed a <strong>regular place</strong> to host the events. We were lucky to find <a href="https://ulab.es/" target="_blank" rel="external">ULab</a>, a co-working center that made everything easy for us from the beginning. Not only allowing us to use the space, but also helping us preparing and promoting them.</p><img src="/2017/11/21/1-year-organising-Alicante-Frontend/ulab.jpeg" alt="ULab, the coworking center where we host the meetups" title="ULab, the coworking center where we host the meetups"><p>At ULab, <strong>speakers</strong> come and share whatever they’d like to. They’re core of the events, and very, very difficult to find. That’s why we like to compensate them for their effort. Lately we’ve been consistently having speakers every month, which is great.</p><p>Usually, we get to the events a bit sooner so we start preparing it. We try to make some fun so the speakers relax and feel more comfortable.</p><img src="/2017/11/21/1-year-organising-Alicante-Frontend/preparations.jpg" alt="Getting ready with speakers" title="Getting ready with speakers"><p>Then, an organiser gives a sync-up intro where we share some news, announcements, decisions and other information about coming events. We like to be as transparent as possible in order to keep the community informed.</p><p>We had talks about JavaScript, functional (reactive) programming, building projects, Web performance, Web analytics, and even a workshop of Clojure. Special thanks to <a href="https://twitter.com/FlavioCorpa" target="_blank" rel="external">Flavio Corpa</a>, <a href="https://twitter.com/FlavioCorpa" target="_blank" rel="external">Ciro Ivan</a>, <a href="https://twitter.com/kikobeats" target="_blank" rel="external">Kikobeats</a>, <a href="https://github.com/joakin" target="_blank" rel="external">Joaquin</a>, <a href="https://twitter.com/jmperezperez" target="_blank" rel="external">Jose Manuel Perez</a> and <a href="https://twitter.com/laurabonmati" target="_blank" rel="external">Laura Bonmati</a> for their talks and keeping this community alive.</p><img src="/2017/11/21/1-year-organising-Alicante-Frontend/speakers.jpg" alt="Several speakers of Alicante Frontend in 2017" title="Several speakers of Alicante Frontend in 2017"><p>In Alicante Frontend we care about involving <strong>companies</strong>. We believe there is a need to improve the culture and mindset of local companies, and we believe we can make a change starting with the most talent resource: their employees. We mentor each other on technologies, workflows and best practices. It’s a win-win: companies get more visibility and qualified employees while employees feel more satisfied and productive by growing professionally and technically and meeting people in the community. We hope this increases the visibility for foreign companies to come to Alicante, which means more and better job opportunities.</p><p>Thanks to the companies that help us, we can do all kind of cool stuff that requires a minimum amount of costs: having stickers, presents for the speakers, meetup’s costs…</p><img src="/2017/11/21/1-year-organising-Alicante-Frontend/sponsors.png" alt="Sponsors and collaborators" title="Sponsors and collaborators"><p>Last but not least, Alicante Frontend is its <strong>people</strong>. We all come to teach, to learn, to share, and more importantly to <strong>have fun</strong>. That’s community, doesn’t matter how many you are, what matters is to enjoy meeting new people, talking about how your work is, what you have been doing lately and share experiences in general. We all are a great family.</p><img src="/2017/11/21/1-year-organising-Alicante-Frontend/people.jpeg" alt="Alicante Frontend's people" title="Alicante Frontend's people"><p>Part of that happens in the <strong>networking</strong>, right after the event. Here we surely have fun.</p><img src="/2017/11/21/1-year-organising-Alicante-Frontend/networking.jpg" alt="Alicante Frontend's networking" title="Alicante Frontend's networking"><h1 id="The-future"><a href="#The-future" class="headerlink" title="The future"></a>The future</h1><p>We’d like to keep up the hype and continue growing and improving this lovely community. Taking a retrospective view and matching our values, we have plenty of cool ideas we want to try out next year:</p><ul><li><strong>Have more fun! Hands-on events</strong>: knowing how difficult is to find speakers around here, and how fun people consider “practical” events, we’ll probably organise more workshop/hackaton-like events. Ideas: <em>Code in the Dark, Open Hacking (featuring Open Source), Katas…</em></li><li><strong>Bring speakers</strong>: we’d like to bring somehow known speakers from outside Alicante, having a sponsor covering the costs. We already have one confirmed for next year, so stay tuned! :)</li><li><strong>Conference</strong>: Alicante is a very convenient place for a conference, in terms of connections, weather and standard of living. That’s proven by the success of <a href="http://reactalicante.es/" target="_blank" rel="external">React Alicante</a>. However, this is not something we can rush to do: organising a conference requires an extremely amount of time, energy and dedication, and we don’t have that much (we have lives aside from work and Alicante Frontend), so we need to make sure we can commit to it, and if we do, to enjoy it. For that reason, we cannot make sure this will happen this year. <strong>Would you like to be part of this?</strong> We’ll need help for sure, so don’t hesitate in contacting us.</li></ul><p>Any other ideas? Please tell us!</p><p>We hope you get an overview of what Alicante Frontend is and what our values are. We wish this community to keep up growing and improving, bringing more people and companies together. We’re excited and doing our best to improve the Web community in Alicante! So if you haven’t come and visited us, what are you waiting for?</p>]]></content>
    
    <summary type="html">
    
      My insights about organising Alicante Frontend&#39;s meetup after a year
    
    </summary>
    
    
      <category term="Community" scheme="http://alexjoverm.github.io/tags/Community/"/>
    
  </entry>
  
  <entry>
    <title>My tips to be a happier developer</title>
    <link href="http://alexjoverm.github.io/2017/11/13/My-tips-to-be-a-happier-developer/"/>
    <id>http://alexjoverm.github.io/2017/11/13/My-tips-to-be-a-happier-developer/</id>
    <published>2017-11-13T13:58:35.000Z</published>
    <updated>2017-11-13T13:58:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Here are some tips that I’m practising to be a happier developer.</p><a id="more"></a><img src="/2017/11/13/My-tips-to-be-a-happier-developer/happy.jpg" alt="Happy" title="Happy"><p>Are you often in a frustrated mood? Do you think sometimes that you don’t meet the deadlines? Are you worried about not performing well, or getting negative feedback, or that is too big for you? Do you sometimes suffer anxiety or stress?</p><p>I’ve been suffering an anxiety/panic disorder for almost a year. I’m not gonna get into the details, is not a happy story and is somewhat complex, but the point is I’ve learned a lot on the way. I’m writing this article, both to remind myself and to tell you what have I learnt and found out during this time.</p><p>Keep in mind that these are my points, it may work or not for you. Do you have any other you wanna share? :)</p><h2 id="1-Focus-on-success-rather-than-failure"><a href="#1-Focus-on-success-rather-than-failure" class="headerlink" title="1. Focus on success rather than failure"></a>1. Focus on success rather than failure</h2><p>Programming is an activity that it’s about constantly having a problem and solving it. That makes it a very risky activity. How many times did you get stuck at some point? And trying to find the reason of a bug? Probably you get to sleep and other day you solve it quickly, right?</p><p>We usually have deadlines, which makes us to come up with a delivery plan. In addition, we expect the software we build to work flawlessly, and the the users of the system we’re building to like it.</p><p>As you can see, there are many things that can go wrong (and will). So, what can we do about all that?</p><p>Well, we <strong>can’t do anything to prevent this to happen</strong>. But instead, we can:</p><ul><li><strong>Don’t blame yourself (or others)</strong>: Remember <strong>you do everything the best you can</strong>, so just don’t punish yourself when you get stuck, don’t meet a deadline or whatever goes wrong. Probably the reason was in a bad planning, or short time.</li><li>Instead, <strong>congratulate yourself</strong> for whatever tiny thing you did or tried. What I usually do is to by the end of the day, I <strong>write 4 or 5 things I did in a post-it</strong> and stick it somewhere around.</li><li>When something goes wrong, think on <strong>what you tried</strong> to do instead of the failure itself. Then, you could do a <strong>retrospective</strong> on yourself or with your team, to see how to do this better for the next time.</li></ul><h2 id="2-Build-empathy-within-your-team"><a href="#2-Build-empathy-within-your-team" class="headerlink" title="2. Build empathy within your team"></a>2. Build empathy within your team</h2><p>Development is a team sport. One alone just cannot do much, plus it can get boring. So try to be as much comfortable as you can with the team you’re working on. Any social skill you can apply here will be good. Here some are my tips:</p><ul><li><strong>Learn to take/give feedback</strong>: Nothing can be more annoying than someone putting down your work. So don’t be like that and give constructive feedback. One way is to apply the <a href="http://www.rightattitudes.com/2008/02/20/sandwich-feedback-technique/" target="_blank" rel="external">Sandwich model</a> (good, bad, good) when you must say something unpleasant to someone. It’d be good for you if you can ignore non constructive feedback, or do the sandwich mentally yourself afterwards :)</li><li><strong>Practise team building activities</strong>: It can go from doing sport, going for lunch… anything</li><li><strong>Thank someone everyday</strong>: This is a positive thinking technique that could apply to anything in your live. Send a message/email/whatever to a colleague thanking him/her, even for very small things, such as <em>“Hey John! Thanks a lot for helping me finding that bug before!”</em></li></ul><h2 id="3-Manage-your-time-and-priorities"><a href="#3-Manage-your-time-and-priorities" class="headerlink" title="3. Manage your time and priorities"></a>3. Manage your time and priorities</h2><p>Nowadays life goes fast, so fast that we go faster with it. And we end up in a routine where we try to do too many things that we can manage to do. That makes us being really over-demanding on ourselves, leading to frustration and anxiety because of not completing the tasks, or doing it under much pressure for quite some time.</p><p>You wanna prepare a talk, attend a meetup, keep your Open Source work, write on your blog, stay healthy practising sport, meet with friends, spend time with your family, run some side-project… and you work full time as well. Be careful, being too ambitious can turn against you.</p><p>What can we do to about it?</p><ul><li><strong>Slow down and push the break</strong>: Minimize your task queue. Keep in mind it is better to do 2 things well done, than 4 badly/quickly done.</li><li><strong>Enjoy what you do</strong>: When you slow down, you have more time to pay attention to what you’re doing, making it be more enjoyable. That’s what mindfulness stands for.</li><li><strong>Apply a time management technique</strong>: Personally I (kind of) use <a href="http://lifehacker.com/productivity-101-a-primer-to-the-pomodoro-technique-1598992730" target="_blank" rel="external">Pomodoro</a>. The point is to enforce breaks to move and distract yourself in order to don’t spend hours on a task continuously.</li></ul><h2 id="4-Keep-up-your-motivation"><a href="#4-Keep-up-your-motivation" class="headerlink" title="4. Keep up your motivation"></a>4. Keep up your motivation</h2><p>I’m not a fan of Steve Jobs, but he said it very well:</p><blockquote><p>“Stay hungry, stay foolish”</p></blockquote><p>There is nothing more wonderful that being motivated on what you’re doing. It makes you love your work and spread that to the people of your circle.</p><p>Keeping yourself up to date and involved in the community of your technologies is a must for keeping up your motivation. You’ll grow, which makes you feel productive. You’ll socialize and meet new people. You’ll find people you admire and people who admire you, and that is really beautiful.</p><p>You could feel like the following tips are against the point <em><a href="#3-Manage-your-time-and-priorities">Manage your time and priorities</a></em>, but they are beneficial as long as you <strong>make sure you don’t overdo</strong>, and set a <strong>limit</strong> for these:</p><ul><li><strong>Do Open Source!</strong>: Now is easier than ever, since an <a href="https://opensource.guide/" target="_blank" rel="external">open source guide</a> has been created by github itself and lots of experienced OSS devs. I’ve started <a href="https://github.com/alexjoverm" target="_blank" rel="external">doing it</a> and got many good feedback from my projects users! Not to mention the feeling when you’re doing something other people find useful</li><li><strong>Go to Meetups and conferences</strong>: You’ll meet lots of people physically, which opens you a lot of doors and keeps you connected to more communities and its ecosystem. If you’re brave enough to speak in one, you’ll get a great feeling afterwards, so go and try and see what it feels like ;).</li><li><strong>Build side projects</strong>: It can be anything, such as building dummy apps, organizing events, sharing knowledge, creating libraries, etc. Some things I did is to create this blog, become an <a href="https://egghead.io/instructors/alex-jover-morales" target="_blank" rel="external">Egghead instructor</a>, create <a href="https://www.meetup.com/es-ES/Alicante-Frontend/" target="_blank" rel="external">Alicante Frontend</a> meetup group with some friends, contributing to Open Source…</li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>There are really a lot of ways to be happier and better as a developer, and they come mostly from the psychology side instead of from being a successful developer. Here I told you some of my tips, I’m looking forward to hear yours!</p><p>If you like it, please go and share it! You can follow me on this blog or on twitter as <a href="https://twitter.com/alexjoverm" target="_blank" rel="external">@alexjoverm</a>. Any questions? Shoot!</p>]]></content>
    
    <summary type="html">
    
      Learn a few tips to be a happier and better developer and be a better team player
    
    </summary>
    
    
      <category term="Human side" scheme="http://alexjoverm.github.io/tags/Human-side/"/>
    
  </entry>
  
  <entry>
    <title>Enhance Jest configuration with Module Aliases</title>
    <link href="http://alexjoverm.github.io/2017/10/07/Enhance-Jest-configuration-with-Module-Aliases/"/>
    <id>http://alexjoverm.github.io/2017/10/07/Enhance-Jest-configuration-with-Module-Aliases/</id>
    <published>2017-10-07T09:33:20.000Z</published>
    <updated>2017-10-07T09:33:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Learn how to use Module Aliases Jest configuration to avoid using relative paths.</p><a id="more"></a><p>The module managers we have in the JavaScript community, mainly ES Modules and CommonJS, don’t support project-based paths. They only support relative paths for our own modules, and paths for the <code>node_modules</code> folder. When a project grows a bit, it’s common to see paths such:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> SomeComponent <span class="token keyword">from</span> <span class="token string">'../../../../components/SomeComponent'</span></code></pre><p>Luckily, we have different ways to cope with this, in a way that we can define aliases for folders relative to the project root, so we could the above line like:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> SomeComponent <span class="token keyword">from</span> <span class="token string">'@/components/SomeComponent'</span></code></pre><p>The <code>@</code> here is an arbitrary character to define the root project, you can define your own. Let’s see what solutions we have to apply module aliasing. Let’s start <a href="https://github.com/alexjoverm/vue-testing-series/tree/test-slots" target="_blank" rel="external">from where we left it on the last article</a>.</p><h2 id="Webpack-aliases"><a href="#Webpack-aliases" class="headerlink" title="Webpack aliases"></a>Webpack aliases</h2><p><a href="https://webpack.js.org/configuration/resolve/#resolve-alias" target="_blank" rel="external">Webpack aliases</a> are very simple to set up. You just need to add a <code>resolve.alias</code> property in your webpack configuration. If you take a look at the <code>build/webpack.base.conf.js</code>, it already has it defined:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token operator">...</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'vue$'</span><span class="token punctuation">:</span> <span class="token string">'vue/dist/vue.esm.js'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Taking this as an entry point, we can add a simple alias that points to the <code>src</code> folder and use that as the root:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token operator">...</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'vue$'</span><span class="token punctuation">:</span> <span class="token string">'vue/dist/vue.esm.js'</span><span class="token punctuation">,</span>      <span class="token string">'@'</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'..'</span><span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Just with this, we can access anything taking the root project as the <code>@</code> symbol. Let’s go to <code>src/App.vue</code> and change the reference to those two components:</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">import</span> MessageList <span class="token keyword">from</span> <span class="token string">'@/components/MessageList'</span>  <span class="token keyword">import</span> Message <span class="token keyword">from</span> <span class="token string">'@/components/Message'</span>  <span class="token operator">...</span></code></pre><p>And if we run <code>npm start</code> and open the browser at <code>localhost:8080</code>, that should work out of the box.</p><p>However, if we try to run the tests by running <code>npm t</code>, we’ll see Jest doesn’t find the modules. We still didn’t configured Jest to do so. So let’s go to <code>package.json</code> where the Jest config is, and add <code>&quot;@/([^\\.]*)$&quot;: &quot;&lt;rootDir&gt;/src/$1&quot;</code> to <code>moduleNameMapper</code>:</p><pre class=" language-json"><code class="language-json"><span class="token property">"jest"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"moduleNameMapper"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"@(.*)$"</span><span class="token operator">:</span> <span class="token string">"&lt;rootDir>/src/$1"</span><span class="token punctuation">,</span>      <span class="token property">"^vue$"</span><span class="token operator">:</span> <span class="token string">"vue/dist/vue.common.js"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>...</code></pre><p>Let’s explain it:</p><ul><li><code>@(.*)$</code>: Whatever starts with <code>@</code>, and continues with literally whatever (<code>(.*)$</code>) till the end of the string, grouping it by using the parenthesis</li><li><code>&lt;rootDir&gt;/src/$1</code>: <code>&lt;rootDir&gt;</code> is a special word of Jest, meaning the root directory. Then we map it to the <code>src</code>, and with <code>$1</code> we append the whatever clause from the <code>(.*)</code> statement.</li></ul><p>For example, <code>@/components/MessageList</code> will be mapped to <code>../src/components/MessageList</code> when you’re importing it from the <code>src</code> or <code>test</code> folders.</p><p>That’s really it. Now you can even update your <code>App.test.js</code> file to use the alias as well, since it’s usable from within the tests:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> shallow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-test-utils"</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"@/App"</span><span class="token operator">...</span></code></pre><p>And it will work for both <code>.vue</code> and <code>.js</code> files.</p><h2 id="Multiple-aliases"><a href="#Multiple-aliases" class="headerlink" title="Multiple aliases"></a>Multiple aliases</h2><p>Very often, multiple aliases are used for convenience, so instead of using just a <code>@</code> to define your root folder, you use many. For example, let’s say you have a <code>actions</code> and <code>models</code> folder. If you create an alias for each one, and then you move the folders around, you just need to change the aliases instead of updating all the references to it in the codebase. That’s the power of module aliases, they make your codebase more maintainable and cleaner.</p><p>Let’s add a <code>components</code> alias in <code>build/webpack.base.conf.js</code>:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token operator">...</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'vue$'</span><span class="token punctuation">:</span> <span class="token string">'vue/dist/vue.esm.js'</span><span class="token punctuation">,</span>      <span class="token string">'@'</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'..'</span><span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">)</span>      <span class="token string">'components'</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'..'</span><span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">,</span> <span class="token string">'components'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Then, we just need to add it as well to the Jest configuration in <code>package.json</code>:</p><pre class=" language-json"><code class="language-json"><span class="token property">"jest"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"moduleNameMapper"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"@(.*)$"</span><span class="token operator">:</span> <span class="token string">"&lt;rootDir>/src/$1"</span><span class="token punctuation">,</span>      <span class="token property">"components(.*)$"</span><span class="token operator">:</span> <span class="token string">"&lt;rootDir>/src/components/$1"</span><span class="token punctuation">,</span>      <span class="token property">"^vue$"</span><span class="token operator">:</span> <span class="token string">"vue/dist/vue.common.js"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>...</code></pre><p>As simple as that. Now, we can try in <code>App.vue</code> to use both forms:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> MessageList <span class="token keyword">from</span> <span class="token string">'components/MessageList'</span><span class="token keyword">import</span> Message <span class="token keyword">from</span> <span class="token string">'@/components/Message'</span></code></pre><p>Stop and re-run the tests, and that should work, as well as if you run <code>npm start</code> and try it.</p><h2 id="Other-solutions"><a href="#Other-solutions" class="headerlink" title="Other solutions"></a>Other solutions</h2><p>I’ve seen <a href="https://github.com/trayio/babel-plugin-webpack-alias" target="_blank" rel="external">babel-plugin-webpack-alias</a>, specially used for other testing frameworks such as <a href="https://mochajs.org/" target="_blank" rel="external">mocha</a> which doesn’t have a module mapper.</p><p>I haven’t tried it myself, since Jest already gives you that, but if you have or wanna try, please share how it went!</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Adding module aliases is very simple and can keep your codebase much cleaner and easier to maintain. Jest makes it as well very easy to define them, you just need to keep in in sync with the Webpack aliases, and you can say bye-bye to the dot-hell references.</p><p>Find the <a href="https://github.com/alexjoverm/vue-testing-series/tree/Enhance-Jest-configuration-with-Module-Aliases" target="_blank" rel="external">full example on Github</a></p>]]></content>
    
    <summary type="html">
    
      Learn how to use Module Aliases Jest configuration to avoid using relative paths
    
    </summary>
    
    
      <category term="VueJS" scheme="http://alexjoverm.github.io/tags/VueJS/"/>
    
      <category term="JavaScript" scheme="http://alexjoverm.github.io/tags/JavaScript/"/>
    
      <category term="Testing" scheme="http://alexjoverm.github.io/tags/Testing/"/>
    
  </entry>
  
  <entry>
    <title>Test Vue.js Slots in Jest</title>
    <link href="http://alexjoverm.github.io/2017/10/02/Test-Vue-js-Slots-in-Jest/"/>
    <id>http://alexjoverm.github.io/2017/10/02/Test-Vue-js-Slots-in-Jest/</id>
    <published>2017-10-02T12:50:49.000Z</published>
    <updated>2017-10-06T15:45:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Learn how to test content distributed using slots and named slots.</p><a id="more"></a><p>Slots are the way to make content distribution happen in the web components world. Vue.js slots are made following the <a href="https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md" target="_blank" rel="external">Web Component specs</a>, meaning that if you learn how to use them in Vue.js, that will be useful in the future ;).</p><p>They make components structure to be much more flexible, moving the responsibility of managing the state to the parent component. For example, we can have a <code>List</code> component, and different kind of item components, such <code>ListItem</code> and <code>ListItemImage</code>. They’ll be used like:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>List</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListItem</span> <span class="token attr-name">:someProp</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someValue<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListItem</span> <span class="token attr-name">:someProp</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someValue<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListItemImage</span> <span class="token attr-name">:image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageUrl<span class="token punctuation">"</span></span> <span class="token attr-name">:someProp</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someValue<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>List</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>The inner content of <code>List</code> is the slot itself, and its accessible via <code>&lt;slot&gt;</code> tag. So the <code>List</code> implementation looks like:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- slot here will equal to what's inside &lt;List> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>And, say that the <code>ListItem</code> component looks like:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span> {{ someProp }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>Then, the final result rendered by Vue.js would be:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span> someValue <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span> someValue <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span> someValue <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- assume the same implementation for ListItemImage --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><h2 id="Make-MessageList-slot-based"><a href="#Make-MessageList-slot-based" class="headerlink" title="Make MessageList slot based"></a>Make MessageList slot based</h2><p>Let’s take a look at the <code>MessageList.vue</code> component:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Message</span>          <span class="token attr-name">@message-clicked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleMessageClick<span class="token punctuation">"</span></span>          <span class="token attr-name">:message</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span>          <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message in messages<span class="token punctuation">"</span></span>          <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>MessageList has “hardcoded” the Message component inside. In a way that’s more automated, but in the other is not flexible at all. What if you wanna have different types of Message components? What about changing its structure or styling? That’s where slots come in handy.</p><p>Let’s change <code>Message.vue</code> to use slots. First, move that <code>&lt;Message...</code> part to the <code>App.vue</code> component, as well as the <code>handleMessageClick</code> method, so it’s used externally:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MessageList</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Message</span>          <span class="token attr-name">@message-clicked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleMessageClick<span class="token punctuation">"</span></span>          <span class="token attr-name">:message</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span>          <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message in messages<span class="token punctuation">"</span></span>          <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MessageList</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>import MessageList from './components/MessageList'import Message from './components/Message'export default {  name: 'app',  data: () => ({ messages: ['Hey John', 'Howdy Paco'] }),  methods: {    handleMessageClick(message) {      console.log(message)    }  },  components: {    MessageList,    Message  }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>Don’t forget to import the Message component and add it to the <code>components</code> option in <code>App.vue</code>.</p><p>Then, in <code>MessageList.vue</code>, we can remove the references to <code>Message</code>, looking like:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list-messages<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>export default {  name: 'MessageList'}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="children-and-slots"><a href="#children-and-slots" class="headerlink" title="$children and $slots"></a><code>$children</code> and <code>$slots</code></h2><p>Vue components have two instance variables useful for accessing slots:</p><ul><li><code>$children</code>: an array of Vue component instances of the default slot.</li><li><code>$slots</code>: an object of VNodes mapping all the slots defined in the component instance.</li></ul><p>The <code>$slots</code> object has more data available. In fact, <code>$children</code> is just a portion of the <code>$slots</code> variable, that could be accessed the same way by mapping over the <code>$slots.default</code> array, filtered by Vue component instances:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span><span class="token keyword">default</span>  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>vnode <span class="token operator">=</span><span class="token operator">></span> vnode<span class="token punctuation">.</span>componentInstance<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>cmp <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span><span class="token operator">!</span>cmp<span class="token punctuation">)</span></code></pre><h2 id="Testing-Slots"><a href="#Testing-Slots" class="headerlink" title="Testing Slots"></a>Testing Slots</h2><p>Probably what we want to test the most out of slots is where they end up in the component, and for that we can reuse the skills got in the article <em><a href="/2017/09/04/Test-Styles-and-Structure-of-Vue-js-Components-in-Jest/">Test Styles and Structure of Vue.js Components in Jest</a></em>.</p><p>Right now, most of the tests in <code>MessageList.test.js</code> will fail, so let’s remove them all (or comment them out), and focus on slot testing.</p><p>One thing we can test, is to make sure that the Message components end up within a <code>ul</code> element with class <code>list-messages</code>. In order to pass slots to the <code>MessageList</code> component, we can use the <code>slots</code> property of the options object of <code>mount</code> or <code>shallow</code> methods. So let’s create a <a href="https://facebook.github.io/jest/docs/en/api.html#beforeeachfn" target="_blank" rel="external"><code>beforeEach</code> method</a> with the following code:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  cmp <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>MessageList<span class="token punctuation">,</span> <span class="token punctuation">{</span>    slots<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'&lt;div class="fake-msg">&lt;/div>'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Since we just want to test if the messages are rendered, we can search for <code>&lt;div class=&quot;fake-msg&quot;&gt;&lt;/div&gt;</code> as follows:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Messages are inserted in a ul.list-messages element'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> cmp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'ul.list-messages'</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token string">'.fake-msg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>And that should be ok to go. The slots option also accepts a component declaration, and even an array, so we could write:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> AnyComponent <span class="token keyword">from</span> <span class="token string">'anycomponent'</span><span class="token operator">...</span><span class="token function">mount</span><span class="token punctuation">(</span>MessageList<span class="token punctuation">,</span> <span class="token punctuation">{</span>  slots<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> AnyComponent <span class="token comment" spellcheck="true">// or [AnyComponent, AnyComponent]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>The problem with that is that is very limited, you cannot override props for example, and we need that for the <code>Message</code> component since it has a required property. This should affect the cases that you really need to test slots with the expected components. For example, if you wanna make sure that <code>MessageList</code> expects only <code>Message</code> components as slots. That’s <a href="https://github.com/vuejs/vue-test-utils/issues/41#issue-255235880" target="_blank" rel="external">on track and at some point it will land in vue-test-utils</a>.</p><p>As a workaround, we can accomplish that by using a <a href="https://vuejs.org/v2/guide/render-function.html" target="_blank" rel="external">render function</a>. So we can rewrite the test to be more specific:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> messageWrapper <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>Message<span class="token punctuation">,</span> <span class="token punctuation">{</span> props<span class="token punctuation">:</span> <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'hey'</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  cmp <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>MessageList<span class="token punctuation">,</span> <span class="token punctuation">{</span>    slots<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> messageWrapper    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Messages are inserted in a ul.list-messages element'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> cmp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'ul.list-messages'</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isVueInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="Testing-Named-Slots"><a href="#Testing-Named-Slots" class="headerlink" title="Testing Named Slots"></a>Testing Named Slots</h2><p>The unnamed slot we used above is called the <em>default slot</em>, but we can have multiple slots by using named exports. Let’s add a header to the <code>MessageList.vue</code> component:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        This is a default header      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list-messages<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>By using <code>&lt;slot name=&quot;header&quot;&gt;</code> we’re defining another slot for the header. You can see a <code>This is a default header</code> text inside the slot, that’s displayed as the default content when a slot is not passed to the component, and that’s applicable to the default slot.</p><p>Then, from <code>App.vue</code> we can use add a header to the <code>MessageList</code> component by using the <code>slot=&quot;header&quot;</code> attribute:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MessageList</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        Awesome header      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Message</span>          <span class="token attr-name">@message-clicked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleMessageClick<span class="token punctuation">"</span></span>          <span class="token attr-name">:message</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span>          <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message in messages<span class="token punctuation">"</span></span>          <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MessageList</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>It’s time to write a unit test for it. Testing named slots is just as testing a default slot, the same dynamics apply. So, we can start by testing that the header slot is rendered within the <code>&lt;header class=&quot;list-header&quot;&gt;</code> element, and it renders a default text when no header slot is passed by. In <code>MessageList.test.js</code>:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Header slot renders a default header text'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> header <span class="token operator">=</span> cmp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.list-header'</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'This is a default header'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Then, the same but checking the default content gets replaced when we mock the header slot:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Header slot is rendered withing .list-header'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>MessageList<span class="token punctuation">,</span> <span class="token punctuation">{</span>    slots<span class="token punctuation">:</span> <span class="token punctuation">{</span>      header<span class="token punctuation">:</span> <span class="token string">'&lt;div>What an awesome header&lt;/div>'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> header <span class="token operator">=</span> component<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.list-header'</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'What an awesome header'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>See that the header slot used in this last test is wrapped in a <code>&lt;div&gt;</code>. It’s important the slots are wrapped in an html tag, otherwise vue-test-utils will complain.</p><h2 id="Testing-Contextual-Slot-Specs"><a href="#Testing-Contextual-Slot-Specs" class="headerlink" title="Testing Contextual Slot Specs"></a>Testing Contextual Slot Specs</h2><p>We’ve test how and where the slots render, and probably that’s what we mostly need. However, it doesn’t end there. If you pass component instances as slots, just as we’re doing in the default slot with Message, you can test functionality related to it.</p><p>Be careful on what you test here, this is probably something you don’t need to do in most cases, since the functional tests of a component should belong to that component test. When talking about testing slots functionality, we test how a slot must behave <strong>in the context of the component where that slot is used</strong>, and that’s something is not very common. Normally we just pass the slot and forget about it. So don’t get too stick to the following example, It’s only purpose is to demonstrate how the tool works.</p><p>Let’s say that, for whatever reason, in the context of the <code>MessageList</code> component, all the <code>Message</code> components must have a length higher than 5. We can test that like:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Message length is higher than 5'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> messages <span class="token operator">=</span> cmp<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>Message<span class="token punctuation">)</span>  messages<span class="token punctuation">.</span>wrappers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>message<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThan</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><code>findAll</code> returns an object containing an array of <code>wrappers</code> where we can access its <code>vm</code> component instance property. This test will fail because the message has a length of 3, so go to the <code>beforeEach</code> function and make it longer:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> messageWrapper <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>Message<span class="token punctuation">,</span> <span class="token punctuation">{</span> props<span class="token punctuation">:</span> <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'hey yo'</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">...</span></code></pre><p>Then it should pass.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Testing slots is very simple, normally we’d like to test that they’re placed and rendered as we want, so is just like testing style and structure knowing how slots behave or can be mocked. You won’t need to test slot functionality very ofter probably. Keep in mind to test things only related to slots when you want to test slots, and think twice if what you’re testing belongs to the slot test or the component test itself.</p><p>You can find the code of this article <a href="https://github.com/alexjoverm/vue-testing-series/tree/test-slots" target="_blank" rel="external">in this repo</a>.</p>]]></content>
    
    <summary type="html">
    
      Learn how to test content distributed using slots and named slots.
    
    </summary>
    
    
      <category term="VueJS" scheme="http://alexjoverm.github.io/tags/VueJS/"/>
    
      <category term="JavaScript" scheme="http://alexjoverm.github.io/tags/JavaScript/"/>
    
      <category term="Testing" scheme="http://alexjoverm.github.io/tags/Testing/"/>
    
  </entry>
  
  <entry>
    <title>Test Methods and Mock Dependencies in Vue.js with Jest</title>
    <link href="http://alexjoverm.github.io/2017/09/25/Test-Methods-and-Mock-Dependencies-in-Vue-js-with-Jest/"/>
    <id>http://alexjoverm.github.io/2017/09/25/Test-Methods-and-Mock-Dependencies-in-Vue-js-with-Jest/</id>
    <published>2017-09-25T06:18:23.000Z</published>
    <updated>2017-10-06T15:44:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Learn how to test methods and cope with mocking module dependencies.</p><a id="more"></a><p>What should we test in methods? That’s a question that we had when we started doing unit tests. Everything comes down to <strong>test what that method do, and just that</strong>. This means we need to <strong>avoid calls to any dependency</strong>, so we’ll need to mock them.</p><p>Let’s add a <code>onSubmit</code> event to the form in the <code>Form.vue</code> component that we created in the <a href="/2017/09/18/Test-Computed-Properties-and-Watchers-in-Vue-js-Components-with-Jest/">last article</a>:</p><pre class=" language-html"><code class="language-html">...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">@submit.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onSubmit(inputValue)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...</code></pre><p>The <code>.prevent</code> modifier is just a convenient way to call <code>event.preventDefault()</code> in order to don’t reload the page. Now make some modifications to call an api and store the result, by adding a <code>results</code> array to the data and a <code>onSubmit</code> method:</p><pre class=" language-javascript"><code class="language-javascript">data<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  inputValue<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  results<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">onSubmit</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'https://jsonplaceholder.typicode.com/posts?q='</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>results <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>results <span class="token operator">=</span> results<span class="token punctuation">.</span>data    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">...</span></code></pre><p>The method is using axios to perform an HTTP call to the “posts” endpoint of jsonplaceholder, which is just a RESTful API for this kind of examples, and with the <code>q</code> query parameter we can search for posts, using the <code>value</code> provided as parameter.</p><p>For testing the <code>onSubmit</code> method:</p><ul><li>We don’t wanna call <code>axios.get</code> actual method</li><li>We wanna check it is calling axios (but not the real one) and it returns a promise</li><li>That promise callback should set <code>this.results</code> to the promise result</li></ul><p>This is probably one of the hardest things to test, when you have external dependencies plus those return promises that do things inside. What we need to do is to <strong>mock the external dependencies</strong>.</p><h2 id="Mock-External-Module-Dependencies"><a href="#Mock-External-Module-Dependencies" class="headerlink" title="Mock External Module Dependencies"></a>Mock External Module Dependencies</h2><p>Jest provides a really great mocking system that allows you to mock everything in a quite convenient way. You don’t need any extra libraries for that. We have seen already <code>jest.spyOn</code> and <code>jest.fn</code> for spying and creating stub functions, although that’s not enough for this case.</p><p>We need to mock the whole <code>axios</code> module. Here’s where <code>jest.mock</code> comes into the stage. It allow us to easily mock module dependencies by writing at the top of you file:</p><pre class=" language-javascript"><code class="language-javascript">jest<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'dependency-path'</span><span class="token punctuation">,</span> implementationFunction<span class="token punctuation">)</span></code></pre><p>You must know that <strong><code>jest.mock</code> is hoisted</strong>, which means it will be placed at the top. So:</p><pre class=" language-javascript"><code class="language-javascript">jest<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'something'</span><span class="token punctuation">,</span> jest<span class="token punctuation">.</span>fn<span class="token punctuation">)</span><span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">'bar'</span><span class="token operator">...</span></code></pre><p>Is equivalent to:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">'bar'</span>jest<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'something'</span><span class="token punctuation">,</span> jest<span class="token punctuation">.</span>fn<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// this will end up above all imports and everything</span><span class="token operator">...</span></code></pre><p>By the date of writing, I still haven’t seen much info about how to do in Jest what we’re gonna do here on the internet. Lucky you don’t have to go through the same struggle.</p><p>Let’s write the mock for axios at the top of the <code>Form.test.js</code> test file, and the corresponding test case:</p><pre class=" language-javascript"><code class="language-javascript">jest<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token keyword">get</span><span class="token punctuation">:</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">import</span> <span class="token punctuation">{</span> shallow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-test-utils'</span><span class="token keyword">import</span> Form <span class="token keyword">from</span> <span class="token string">'../src/components/Form'</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span> <span class="token comment" spellcheck="true">// axios here is the mock from above!</span><span class="token operator">...</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Calls axios.get'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token string">'an'</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledWith</span><span class="token punctuation">(</span><span class="token string">'https://jsonplaceholder.typicode.com/posts?q=an'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>This is great, we’re indeed mocking axios, so the original axios is not called nor any HTTP call. And, we’re even checking by using <code>toBeCalledWith</code> that it’s been called with the right parameters. But we’re still missing something: <strong><em>we’re not checking that it returns a promise</em></strong>.</p><p>First we need to make our mocked <code>axios.get</code> method to return a promise. <code>jest.fn</code> accepts a factory function as a parameter, so we can use it to define its implementation:</p><pre class=" language-javascript"><code class="language-javascript">jest<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token keyword">get</span><span class="token punctuation">:</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>But still, we cannot access the promise, because we’re not returning it. In testing, is a good practice to return something from a function when possible, it makes testing much easier. Let’s do it then in the <code>onSubmit</code> method of the <code>Form.vue</code> component:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">onSubmit</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> getPromise <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'https://jsonplaceholder.typicode.com/posts?q='</span> <span class="token operator">+</span> value<span class="token punctuation">)</span>  getPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>results <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>results <span class="token operator">=</span> results<span class="token punctuation">.</span>data  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> getPromise<span class="token punctuation">}</span></code></pre><p>Then we can use the very clean ES2017 <code>async/await</code> syntax in the test to check the promise result:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Calls axios.get and checks promise result'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token string">'an'</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>results<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledWith</span><span class="token punctuation">(</span><span class="token string">'https://jsonplaceholder.typicode.com/posts?q=an'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>You can see that we don’t only check the promise result, but also that the <code>results</code> internal state of the component is updated as expected, by doing <code>expect(cmp.vm.results).toEqual([3])</code>.</p><h2 id="Keep-mocks-externalized"><a href="#Keep-mocks-externalized" class="headerlink" title="Keep mocks externalized"></a>Keep mocks externalized</h2><p>Jest allows us to have all our mocks separated in their own JavaScript file, placing them under a <code>__mocks__</code> folder, keeping the tests as clean as possible.</p><p>So we can take the <code>jest.mock...</code> block from top of the <code>Form.test.js</code> file out to it’s own file:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// test/__mocks__/axios.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token keyword">get</span><span class="token punctuation">:</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>Just like this, with no extra effort, Jest automatically applies the mock in all our tests so we don’t have to do anything extra or mocking it in every test manually. Notice the module name must match the file name. If you run the tests again, they should still pass.</p><p>Keep in mind the modules registry and the mocks state is kept, so if you write another test afterwards, you may get undesired results:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Calls axios.get'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token string">'an'</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>results<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledWith</span><span class="token punctuation">(</span><span class="token string">'https://jsonplaceholder.typicode.com/posts?q=an'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Axios should not be called here'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">expect</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledWith</span><span class="token punctuation">(</span><span class="token string">'https://jsonplaceholder.typicode.com/posts?q=an'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>The second test should fail, but it doesn’t! That’s because <code>axios.get</code> was called on the test before.</p><p>For that reason, it’s a good practice to clean the module registry and the mocks, since they’re manipulated by Jest in order to make mocking happen. For that you can add in your <code>beforeEach</code>:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  cmp <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span>Form<span class="token punctuation">)</span>  jest<span class="token punctuation">.</span><span class="token function">resetModules</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  jest<span class="token punctuation">.</span><span class="token function">clearAllMocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>That will ensure each test starts with clean mocks and modules, as it should be in unit testing.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Jest mocking feature, along with snapshot testing, are what I love the most of Jest! It makes very easy what usually is quite hard to test, and focus on writing faster and better isolated tests and keep your codebase bullet-proof.</p><p>You can find the code of this article <a href="https://github.com/alexjoverm/vue-testing-series/tree/Test-State-Computed-Properties-and-Methods-in-Vue-js-Components-with-Jest" target="_blank" rel="external">in this repo</a>.</p>]]></content>
    
    <summary type="html">
    
      Learn how to test methods and cope with mocking module dependencies.
    
    </summary>
    
    
      <category term="VueJS" scheme="http://alexjoverm.github.io/tags/VueJS/"/>
    
      <category term="JavaScript" scheme="http://alexjoverm.github.io/tags/JavaScript/"/>
    
      <category term="Testing" scheme="http://alexjoverm.github.io/tags/Testing/"/>
    
  </entry>
  
  <entry>
    <title>Test Computed Properties and Watchers in Vue.js Components with Jest</title>
    <link href="http://alexjoverm.github.io/2017/09/18/Test-Computed-Properties-and-Watchers-in-Vue-js-Components-with-Jest/"/>
    <id>http://alexjoverm.github.io/2017/09/18/Test-Computed-Properties-and-Watchers-in-Vue-js-Components-with-Jest/</id>
    <published>2017-09-18T09:25:20.000Z</published>
    <updated>2017-09-18T09:25:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Learn about testing Computed Properties and Watchers reactivity in Vue.js.</p><a id="more"></a><p>Computed properties and watchers are reactive parts of the logic of Vue.js components. They both serve totally different purposes, one is synchronous and the other asynchronous, which makes them behave slightly different.</p><p>In this article we’ll go through testing them and see what different cases we can find on the way.</p><h2 id="Computed-Properties"><a href="#Computed-Properties" class="headerlink" title="Computed Properties"></a>Computed Properties</h2><p>Computed properties are simple reactive functions that return data in another form. They behave exactly like the language standard <code>get/set</code> properties:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">X</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token keyword">get</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>  <span class="token punctuation">}</span>  <span class="token keyword">set</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>In fact, when you’re building class based Vue components, as I explain in my <a href="https://egghead.io/courses/use-typescript-to-develop-vue-js-web-applications" target="_blank" rel="external">Egghead course “Use TypeScript to Develop Vue.js Web Applications”</a>, you’ll write it just like that. If you’re using plain objects, it’d be:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>And you can even add the <code>set</code> as follows:</p><pre class=" language-javascript"><code class="language-javascript">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    fullName<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="Testing-Computed-Properties"><a href="#Testing-Computed-Properties" class="headerlink" title="Testing Computed Properties"></a>Testing Computed Properties</h3><p>Testing a computed property is very simple, and probably sometimes you don’t test a computed property exclusively, but test it as part of other tests. But most times it’s good to have a test for it, whether that computed property is cleaning up an input, or combining data, we wanna make sure things work as intended. So let’s begin.</p><p>First of all, create a <code>Form.vue</code> component:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reversed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ reversedInput }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>export default {  props: ['reversed'],  data: () => ({    inputValue: ''  }),  computed: {    reversedInput() {      return this.reversed ?        this.inputValue.split("").reverse().join("") :        this.inputValue    }  }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>It will show an input, and next to it the same string but reversed. It’s just a silly example, but enough to test it.</p><p>Now add it to <code>App.vue</code>, put it after the <code>MessageList</code> component, and remember to import it and include it within the <code>components</code> component option. Then, create a <code>test/Form.test.js</code> with the usual bare-bones we’ve used in other tests:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> shallow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-test-utils'</span><span class="token keyword">import</span> Form <span class="token keyword">from</span> <span class="token string">'../src/components/Form'</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Form.test.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> cmp  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    cmp <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span>Form<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Now create a test suite with 2 test cases:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Properties'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'returns the string in normal order if reversed property is not true'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">'Yoo'</span>    <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>reversedInput<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'Yoo'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'returns the reversed string if reversed property is true'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">'Yoo'</span>    cmp<span class="token punctuation">.</span><span class="token function">setProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span> reversed<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>reversedInput<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'ooY'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>We can access the component instance within <code>cmp.vm</code>, so we can access the internal state, computed properties and methods. Then, to test it is just about changing the value and making sure it returns the same string when reversed is false.</p><p>For the second case, it would be almost the same, with the difference that we must set the <code>reversed</code> property to true. We could navigate through <code>cmp.vm...</code> to change it, but vue-test-utils give us a helper method <code>setProps({ property: value, ... })</code> that makes it very easy.</p><p>That’s it, depending on the computed property it may need more test cases.</p><h2 id="Watchers"><a href="#Watchers" class="headerlink" title="Watchers"></a>Watchers</h2><p>Honestly, I haven’t come across any case where I really need to use watchers that I computed properties couldn’t solve. I’ve seen them misused as well, leading to a very unclear data workflow among components and messing everything up, so don’t rush on using them and think beforehand.</p><p>As you can see in the <a href="https://vuejs.org/v2/guide/computed.html#Watchers" target="_blank" rel="external">Vue.js docs</a>, watchers are often used to react to data changes and perform asynchronous operations, such can be performing an ajax request.</p><h3 id="Testing-Watchers"><a href="#Testing-Watchers" class="headerlink" title="Testing Watchers"></a>Testing Watchers</h3><p>Let’s say we wanna do something when the <code>inputValue</code> from the state change. We could do an ajax request, but since that’s more complicated and we’ll see it in the next lesson, let’s just do a <code>console.log</code>. Add a <code>watch</code> property to the <code>Form.vue</code> component options:</p><pre class=" language-javascript"><code class="language-javascript">watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">inputValue</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>newVal<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> newVal <span class="token operator">!==</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Notice the <code>inputValue</code> watch function matches the state variable name. By convention, Vue will look it up in both <code>properties</code> and <code>data</code> state by using the watch function name, in this case <code>inputValue</code>, and since it will find it in <code>data</code>, it will add the watcher there.</p><p>See that a watch function takes the new value as a first parameter, and the old one as the second. In this case we’ve chosen to log only when it’s not empty and the values are different. Usually, we’d like to write a test for each case, depending on the time you have and how critical that code is.</p><p>What should we test about the watch function? Well, that’s something we’ll also discuss further in the next lesson when we talk about testing methods, but let’s say we just wanna know that it calls the <code>console.log</code> when it should. So, let’s add the bare bones of the watchers test suite, within <code>Form.test.js</code>:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Form.test.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> cmp  <span class="token operator">...</span>  <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Watchers - inputValue'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> spy    <span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      spy <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">spyOn</span><span class="token punctuation">(</span>console<span class="token punctuation">,</span> <span class="token string">'log'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      spy<span class="token punctuation">.</span><span class="token function">mockClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'is not called if value is empty (trimmed)'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'is not called if values are the same'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'is called with the new value in other cases'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>We’re using a spy on the <code>console.log</code> method, initializing before starting any test, and resetting its state after each of them, so that they start from a clean spy.</p><p>To test a watch function, we just need to change the value of what’s being watch, in this case the <code>inputValue</code> state. But there is something curious… let’s start by the last test</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'is called with the new value in other cases'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">'foo'</span>  <span class="token function">expect</span><span class="token punctuation">(</span>spy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>We change the <code>inputValue</code>, so the <code>console.log</code> spy should be called, right? Well, if you run it, you’ll notice that is not! WTF??? Wait, there is an explanation for this: unlike computed properties, watchers are <strong>deferred to the next update cycle</strong> that Vue uses to look for changes. So, basically, what’s happening here is that <code>console.log</code> is indeed called, but after the test has finished.</p><p>To solve this, we need to use the <a href="https://vuejs.org/v2/api/#vm-nextTick" target="_blank" rel="external"><code>vm.$nextTick</code></a> function to defer code to the next update cycle. But if we write:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'is called with the new value in other cases'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">'foo'</span>  cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>spy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>It will still fail, since the test finishes with the <code>expect</code> function not being called. That happens because now is asynchronous and happens on the <code>$nextTick</code> callback. How can we then test it if the expect happens at a later time?</p><p>Jest give us a <code>next</code> parameter that we can use in the <code>it</code> test callbacks, in a way that if it is present, the test will not finish until <code>next</code> is called, but if it’s not, it will finish synchronously. So, to finally get it right:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'is called with the new value in other cases'</span><span class="token punctuation">,</span> next <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">'foo'</span>  cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>spy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>We can apply the same strategy for the other two, with the difference that the spy shouldn’t be called:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'is not called if value is empty (trimmed)'</span><span class="token punctuation">,</span> next <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">'   '</span>  cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>spy<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'is not called if values are the same'</span><span class="token punctuation">,</span> next <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">'foo'</span>  cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    spy<span class="token punctuation">.</span><span class="token function">mockClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">'foo'</span>    cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">expect</span><span class="token punctuation">(</span>spy<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>That second one gets a bit more complex than it looked like. The default internal state is empty, so first we need to change it, wait for the next tick, then clear the mock to reset the call count, and change it again. Then after the second tick, we can check the spy and finish the test.</p><p>This can get simpler if we recreate the component at the beginning, overriding the <code>data</code> property. Remember we can override any component option by using the second parameter of the <code>mount</code> or <code>shallow</code> functions:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'is not called if values are the same'</span><span class="token punctuation">,</span> next <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  cmp <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span>Form<span class="token punctuation">,</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> inputValue<span class="token punctuation">:</span> <span class="token string">'foo'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">'foo'</span>  cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>spy<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>You’ve learned in this article how to test part of the logic of Vue components: computed properties and watchers. We’ve gone through different test cases we can come across testing them. Probably you’ve also learned some of the Vue internals such as the <code>nextTick</code> update cycles.</p><p>You can find the code of this article <a href="https://github.com/alexjoverm/vue-testing-series/tree/Test-State-Computed-Properties-and-Methods-in-Vue-js-Components-with-Jest" target="_blank" rel="external">in this repo</a>.</p>]]></content>
    
    <summary type="html">
    
      Learn about testing the Computed Properties and Watchers reactivity in Vue.js.
    
    </summary>
    
    
      <category term="VueJS" scheme="http://alexjoverm.github.io/tags/VueJS/"/>
    
      <category term="JavaScript" scheme="http://alexjoverm.github.io/tags/JavaScript/"/>
    
      <category term="Testing" scheme="http://alexjoverm.github.io/tags/Testing/"/>
    
  </entry>
  
  <entry>
    <title>Test Properties and Custom Events in Vue.js Components with Jest</title>
    <link href="http://alexjoverm.github.io/2017/09/11/Test-Properties-and-Custom-Events-in-Vue-js-Components-with-Jest/"/>
    <id>http://alexjoverm.github.io/2017/09/11/Test-Properties-and-Custom-Events-in-Vue-js-Components-with-Jest/</id>
    <published>2017-09-11T07:30:31.000Z</published>
    <updated>2017-12-11T12:03:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>There are different ways to test properties, events and custom events.</p><a id="more"></a><p>Properties are custom attributes passed from parent to child components. Custom events solve just the opposite, they send data out to the direct parent via an event. They both combined are the wires of interaction and communication in Vue.js components.</p><p>In Unit Testing, testing the in and outs (properties and custom events) means to test how a component behaves when it receives and sends out data in isolation. Let’s get our hands dirty!</p><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><p>When we are testing component properties, we can test how the component behave when we pass them certain properties. But before going on, an important note:</p><blockquote><p>To pass properties to components, use <code>propsData</code>, and not <code>props</code>. The last one is to define properties, not to pass them data.</p></blockquote><p>First create a <code>Message.test.js</code> file and add the following code:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Message.test.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> cmp  <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Properties'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// @TODO</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>We group test cases within a <code>describe</code> expression, and they can be nested. So we can use this strategy to group the tests for properties and events separately.</p><p>Then we’ll create a helper factory function to create a message component, give some properties</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> createCmp <span class="token operator">=</span> propsData <span class="token operator">=</span><span class="token operator">></span> <span class="token function">mount</span><span class="token punctuation">(</span>Message<span class="token punctuation">,</span> <span class="token punctuation">{</span> propsData <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="Testing-property-existence"><a href="#Testing-property-existence" class="headerlink" title="Testing property existence"></a>Testing property existence</h3><p>Two obvious things we can test is that a property exists, or it doesn’t. Remember that the <code>Message.vue</code> component has a <code>message</code> property, so let’s assert that it receives correctly that property. vue-test-utils comes with a <code>hasProp(prop, value)</code> function, which is very handy for this case:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'has a message property'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  cmp <span class="token operator">=</span> <span class="token function">createCmp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'hey'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">hasProp</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token string">'hey'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>The properties behave in a way that they will be received only if they’re declared in the component. Meaning that if we pass a <strong>property that is not defined, it won’t be received</strong>. So to check for the no existence of a property, use a non-existing property:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'has no cat property'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  cmp <span class="token operator">=</span> <span class="token function">createCmp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> cat<span class="token punctuation">:</span> <span class="token string">'hey'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">hasProp</span><span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hey'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>However, in this case that test will fail because Vue has <a href="https://vuejs.org/v2/guide/components.html#Non-Prop-Attributes" target="_blank" rel="external">non-props attributes</a> which sets it to the root of the <code>Message</code> component, thus being recognized as a prop and then the test will return <code>true</code>. Changing it to <code>toBeTruty</code> will make it pass for this example:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'has no cat property'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  cmp <span class="token operator">=</span> <span class="token function">createCmp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> cat<span class="token punctuation">:</span> <span class="token string">'hey'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">hasProp</span><span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hey'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>We can test the <strong>default value</strong> as well. Go to <code>Message.vue</code> and change the props as follows:</p><pre class=" language-javascript"><code class="language-javascript">props<span class="token punctuation">:</span> <span class="token punctuation">{</span>  message<span class="token punctuation">:</span> String<span class="token punctuation">,</span>  author<span class="token punctuation">:</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'Paco'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>Then the test could be:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Paco is the default author'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  cmp <span class="token operator">=</span> <span class="token function">createCmp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'hey'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">hasProp</span><span class="token punctuation">(</span><span class="token string">'author'</span><span class="token punctuation">,</span> <span class="token string">'Paco'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="Asserting-properties-validation"><a href="#Asserting-properties-validation" class="headerlink" title="Asserting properties validation"></a>Asserting properties validation</h3><p>Properties can have validation rules, ensuring that a property is required or it is of a determined type. Let’s write the <code>message</code> property as follows:</p><pre class=" language-javascript"><code class="language-javascript">props<span class="token punctuation">:</span> <span class="token punctuation">{</span>  message<span class="token punctuation">:</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    validator<span class="token punctuation">:</span> message <span class="token operator">=</span><span class="token operator">></span> message<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Going further, you could use custom constructors types or custom validation rules, as you can see in <a href="https://vuejs.org/v2/guide/components.html#Prop-Validation" target="_blank" rel="external">the docs</a>. Don’t do this right now, I’m just showing it as an example:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">...</span>props<span class="token punctuation">:</span> <span class="token punctuation">{</span>  message<span class="token punctuation">:</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> Message<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// It's compared using instance of</span>    <span class="token operator">...</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Whenever a validation rule is not fulfilled, Vue shows a console.error. For example, for <code>createCmp({ message: 1 })</code>, the next error will be shown:</p><pre><code>[Vue warn]: Invalid prop: type check failed for prop &quot;message&quot;. Expected String, got Number.(found in &lt;Root&gt;)</code></pre><p>By the date of writing, vue-test-utils doesn’t have any utility to test this. We could use <code>jest.spyOn</code> to test it:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'message is of type string'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> spy <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">spyOn</span><span class="token punctuation">(</span>console<span class="token punctuation">,</span> <span class="token string">'error'</span><span class="token punctuation">)</span>  cmp <span class="token operator">=</span> <span class="token function">createCmp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>spy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledWith</span><span class="token punctuation">(</span>expect<span class="token punctuation">.</span><span class="token function">stringContaining</span><span class="token punctuation">(</span><span class="token string">'[Vue warn]: Invalid prop'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  spy<span class="token punctuation">.</span><span class="token function">mockReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// or mockRestore() to completely remove the mock</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Here we’re spying on the console.error function, and checking that it shows a message containing a specific string. This is not an ideal way to check it, since we’re spying on global objects and relying on side effects.</p><p>Fortunately, there is an easier way to do it, which is by checking <code>vm.$options</code>. Here’s where Vue stores the component options “expanded”. With expanded I mean: you can define your properties in a different ways:</p><pre class=" language-javascript"><code class="language-javascript">props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// or</span>props<span class="token punctuation">:</span> <span class="token punctuation">{</span>  message<span class="token punctuation">:</span> String<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// or</span>props<span class="token punctuation">:</span> <span class="token punctuation">{</span>  message<span class="token punctuation">:</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> String  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>But they all will end up in the most expanded object form (like the last one). So if we check the <code>cmp.vm.$option.props.message</code>, for the first case, they all will be in the <code>{ type: X }</code> format (although for the first example it will be <code>{ type: null}</code>)</p><p>With this in mind, we could write a test suite to test that asserts that the <code>message</code> property has the expected validation rules:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Message.test.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Properties'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Validation'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">createCmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>props<span class="token punctuation">.</span>message      <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'message is of type string'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">expect</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'message is required'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">expect</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>required<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'message has at least length 2'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">expect</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>validator <span class="token operator">&amp;&amp;</span> message<span class="token punctuation">.</span><span class="token function">validator</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">expect</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>validator <span class="token operator">&amp;&amp;</span> message<span class="token punctuation">.</span><span class="token function">validator</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="Custom-Events"><a href="#Custom-Events" class="headerlink" title="Custom Events"></a>Custom Events</h2><p>We can test at least two things in Custom Events:</p><ul><li>Asserting that after an action an event gets triggered</li><li>Checking what an event listener calls when it gets triggered</li></ul><p>Which in the case of the <code>MessageList.vue</code> and <code>Message.vue</code> components example, that gets translated to:</p><ul><li>Assert that <code>Message</code> components triggers a <code>message-clicked</code> when a message gets clicked</li><li>Check in <code>MessageList</code> that when a <code>message-clicked</code> happens, a <code>handleMessageClick</code> function is called</li></ul><p>First, go to <code>Message.vue</code> and use <code>$emit</code> to trigger that custom event:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token style-attr language-css"><span class="token attr-name">      <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px</span><span class="token punctuation">"</span></span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span>      <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{message}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>  export default {    name: 'Message',    props: ['message'],    methods: {      handleClick() {        this.$emit('message-clicked', this.message)      }    }  }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>And in <code>MessageList.vue</code>, handle the event using <code>@message-clicked</code>:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Message</span>          <span class="token attr-name">@message-clicked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleMessageClick<span class="token punctuation">"</span></span>          <span class="token attr-name">:message</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span>          <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message in messages<span class="token punctuation">"</span></span>          <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>import Message from './Message'export default {  name: 'MessageList',  props: ['messages'],  methods: {    handleMessageClick(message) {      console.log(message)    }  },  components: {    Message  }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>Now it’s time to write a unit test. Create a nested describe within the <code>test/Message.spec.js</code> file and prepare the barebones of the test case <em>“Assert that <code>Message</code> components triggers a <code>message-clicked</code> when a message gets clicked”</em> that we mentioned before:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Message.test.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Events'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      cmp <span class="token operator">=</span> <span class="token function">createCmp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'Cat'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'calls handleClick when click on message'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// @TODO</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="Testing-the-Event-Click-calls-a-method-handler"><a href="#Testing-the-Event-Click-calls-a-method-handler" class="headerlink" title="Testing the Event Click calls a method handler"></a>Testing the Event Click calls a method handler</h3><p>The first thing we can test is that when clicking a message, the <code>handleClick</code> function gets called. For that we can use a <code>trigger</code> of the wrapper component, and a jest spy using <code>spyOn</code> function:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'calls handleClick when click on message'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> spy <span class="token operator">=</span> <span class="token function">spyOn</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span>vm<span class="token punctuation">,</span> <span class="token string">'handleClick'</span><span class="token punctuation">)</span>  cmp<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Forces to re-render, applying changes on template</span>  <span class="token keyword">const</span> el <span class="token operator">=</span> cmp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.message'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>handleClick<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><p>See the <code>cmp.update()</code>? When we change things that are used in the template, <code>handleClick</code> in this case, and we want the template to apply the changes, we need to use the <code>update</code> function.</p></blockquote><p>Keep in mind that by using a spy the original method <code>handleClick</code> will be called. Probably you intentionally want that, but normally we want to avoid it and just check that on click the methods is indeed called. For that we can use a Jest Mock function:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'calls handleClick when click on message'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>handleClick <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  cmp<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> el <span class="token operator">=</span> cmp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.message'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>handleClick<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Here we’re totally replacing the <code>handleClick</code> method, accessible on the vm of the wrapper component returned by the mount function.</p><p>We can make it even easier by using <code>setMethods</code> helper that the official tools provide us:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'calls handleClick when click on message'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> stub <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  cmp<span class="token punctuation">.</span><span class="token function">setMethods</span><span class="token punctuation">(</span><span class="token punctuation">{</span> handleClick<span class="token punctuation">:</span> stub <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> el <span class="token operator">=</span> cmp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.message'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>stub<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Using <strong><code>setMethods</code> is the suggested way</strong> to do it, since is an abstraction that official tools give us in case the Vue internals change.</p><h3 id="Testing-the-Custom-Event-message-clicked-is-emitted"><a href="#Testing-the-Custom-Event-message-clicked-is-emitted" class="headerlink" title="Testing the Custom Event message-clicked is emitted"></a>Testing the Custom Event <code>message-clicked</code> is emitted</h3><p>We’ve tested that the click method calls it’s handler, but we haven’t tested that the handler emits the <code>message-clicked</code> event itself. We can call directly the <code>handleClick</code> method, and use a Jest Mock function in combination with the Vue vm <code>$on</code> method:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'triggers a message-clicked event when a handleClick method is called'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> stub <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'message-clicked'</span><span class="token punctuation">,</span> stub<span class="token punctuation">)</span>  cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>stub<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledWith</span><span class="token punctuation">(</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>See that here we’re using <code>toBeCalledWith</code> so we can assert exactly which parameters we expect, making the test even more robust. Not that we’re not using <code>cmp.update()</code> here, since we’re making no changes that need to propagate to the template.</p><h3 id="Testing-the-message-clicked-triggers-an-event"><a href="#Testing-the-message-clicked-triggers-an-event" class="headerlink" title="Testing the @message-clicked triggers an event"></a>Testing the @message-clicked triggers an event</h3><p>For custom events, we cannot use the <code>trigger</code> method, since it’s just for DOM events. But, we can emit the event ourselves, by getting the Message component and using its <code>vm.$emit</code> method. So add the following test to <code>MessageList.test.js</code>:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Calls handleMessageClick when @message-click happens'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> stub <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  cmp<span class="token punctuation">.</span><span class="token function">setMethods</span><span class="token punctuation">(</span><span class="token punctuation">{</span> handleMessageClick<span class="token punctuation">:</span> stub <span class="token punctuation">}</span><span class="token punctuation">)</span>  cmp<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> el <span class="token operator">=</span> cmp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Message<span class="token punctuation">)</span><span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'message-clicked'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>stub<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledWith</span><span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>I’ll leave up to you to test what <code>handleMessageClicked</code> does ;).</p><h2 id="Wrapping-up"><a href="#Wrapping-up" class="headerlink" title="Wrapping up"></a>Wrapping up</h2><p>Here we’ve seen several cases to test properties and events. <code>vue-test-utils</code>, the official Vue testing tools, makes this much easier indeed.</p><p>You can find the working code we’ve used here in <a href="https://github.com/alexjoverm/vue-testing-series/tree/Test-Properties-and-Custom-Events-in-Vue-js-Components-with-Jest" target="_blank" rel="external">this repo</a>.</p>]]></content>
    
    <summary type="html">
    
      Learn different ways to test properties, events and custom events
    
    </summary>
    
    
      <category term="VueJS" scheme="http://alexjoverm.github.io/tags/VueJS/"/>
    
      <category term="JavaScript" scheme="http://alexjoverm.github.io/tags/JavaScript/"/>
    
      <category term="Testing" scheme="http://alexjoverm.github.io/tags/Testing/"/>
    
  </entry>
  
  <entry>
    <title>Test Styles and Structure of Vue.js Components in Jest</title>
    <link href="http://alexjoverm.github.io/2017/09/04/Test-Styles-and-Structure-of-Vue-js-Components-in-Jest/"/>
    <id>http://alexjoverm.github.io/2017/09/04/Test-Styles-and-Structure-of-Vue-js-Components-in-Jest/</id>
    <published>2017-09-04T06:36:01.000Z</published>
    <updated>2017-09-04T06:36:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/vuejs/vue-test-utils" target="_blank" rel="external">vue-test-utils</a> provide us with a set of utilities to assert on Vue.js components.</p><a id="more"></a><p>So far, in the tests we’ve tested via <a href="https://facebook.github.io/jest/docs/snapshot-testing.html" target="_blank" rel="external">Jest Snapshots</a>. This is great, but sometimes we wanna assert something more specific.</p><p>Although you can access the Vue instance via <a href="https://github.com/alexjoverm/vue-testing-series/blob/master/test/MessageList.test.js#L17" target="_blank" rel="external"><code>cmp.vm</code></a>, you have a set of utilities at your disposal to make it easier. Let’s see what we can do.</p><h2 id="The-Wrapper-object"><a href="#The-Wrapper-object" class="headerlink" title="The Wrapper object"></a>The Wrapper object</h2><p>The <code>Wrapper</code> is the main object of <code>vue-test-utils</code>. It is the type returned by <code>mount</code>, <code>shallow</code>, <code>find</code> and <code>findAll</code> functions. You can <a href="https://github.com/vuejs/vue-test-utils/blob/master/types/index.d.ts#L34" target="_blank" rel="external">see here</a> the whole API and typings.</p><h3 id="find-and-findAll"><a href="#find-and-findAll" class="headerlink" title="find and findAll"></a><code>find</code> and <code>findAll</code></h3><p>They accept a <a href="https://github.com/vuejs/vue-test-utils/blob/master/types/index.d.ts#L11" target="_blank" rel="external">Selector</a> as an argument, which can be both a CSS selector or a Vue Component.</p><p>So we can do things like:</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">let</span> cmp <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>MessageList<span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.message'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeInstanceOf</span><span class="token punctuation">(</span>HTMLElement<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// Or even call it multiple times</span>  <span class="token keyword">let</span> el <span class="token operator">=</span> cmp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.message'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>element  <span class="token comment" spellcheck="true">// Although for the previous example, we could do it in one</span>  <span class="token keyword">let</span> el <span class="token operator">=</span> cmp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.message span'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>element</code></pre><h3 id="Asserting-Structure-and-Style"><a href="#Asserting-Structure-and-Style" class="headerlink" title="Asserting Structure and Style"></a>Asserting Structure and Style</h3><p>Let’s add more tests to <code>MessageList.test.js</code>:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'is a MessageList component'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>MessageList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// Or with CSS selector</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'contains a Message component'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>Message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// Or with CSS selector</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'.message'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Here we’re using <code>is</code> to assert the root component type, and <code>contains</code> to check for sub-components existence. Just as <code>find</code> they receive a Selector, which can be a CSS Selector or a Component.</p><p>We have some utils to assert the <strong>Vue instance</strong>:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Both MessageList and Message are vue instances'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">isVueInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isVueInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Now we’re going to assert <strong>Structure</strong> in more detail:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Message element exists'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.message'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Message is not empty'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Message has a class attribute set to "message"'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// For asserting "class", the `hasClass` method is easier</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'message'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><code>exists</code>, <code>isEmpty</code> and <code>hasAttribute</code> comes in very handy for this.</p><p>Then, we have <code>hasClass</code> and <code>hasStyle</code> to assert <strong>Styling</strong>. Let’s update the <code>Message.vue</code> component with a style, since <code>hasStyle</code> asserts only inline styles:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><p>Here the tests:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Message component has the .message class'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Message component has style padding-top: 10'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasStyle</span><span class="token punctuation">(</span><span class="token string">'padding-top'</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="get-methods"><a href="#get-methods" class="headerlink" title="get methods"></a><code>get</code> methods</h3><p>As you’ve seen, we have some useful utils to assert Vue components. Most use the form of <code>hasX</code>, which is great, but to have a <code>getX</code> brings better testing experience, in terms of flexibility and debugging. So you could rewrite the following example:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// `has` form</span><span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'message'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// `get` form</span><span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span></code></pre><p>This is <a href="https://github.com/vuejs/vue-test-utils/issues/27" target="_blank" rel="external">under discussion</a> and seems like it will be added to the library at some point.</p><h2 id="Wrapping-up"><a href="#Wrapping-up" class="headerlink" title="Wrapping up"></a>Wrapping up</h2><p>There is a bunch of utils to make easier testing Vue components. You can find them all in <a href="https://github.com/vuejs/vue-test-utils/blob/master/types/index.d.ts" target="_blank" rel="external">the typings file</a>.</p><p>You can find the working code in <a href="https://github.com/alexjoverm/vue-testing-series/blob/Test-Styles-and-Structure-in-Vue-js-and-Jest/test/MessageList.test.js" target="_blank" rel="external">this repo</a>.</p>]]></content>
    
    <summary type="html">
    
      vue-test-utils provide us with a set of utilities to assert on Vue.js components.
    
    </summary>
    
    
      <category term="VueJS" scheme="http://alexjoverm.github.io/tags/VueJS/"/>
    
      <category term="JavaScript" scheme="http://alexjoverm.github.io/tags/JavaScript/"/>
    
      <category term="Testing" scheme="http://alexjoverm.github.io/tags/Testing/"/>
    
  </entry>
  
  <entry>
    <title>Test Deeply Rendered Vue.js Components in Jest</title>
    <link href="http://alexjoverm.github.io/2017/08/28/Test-Deeply-Rendered-Vue-js-Components-in-Jest/"/>
    <id>http://alexjoverm.github.io/2017/08/28/Test-Deeply-Rendered-Vue-js-Components-in-Jest/</id>
    <published>2017-08-28T09:00:50.000Z</published>
    <updated>2017-10-06T14:20:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s see how to use vue-test-utils to test a fully rendered component tree.</p><a id="more"></a><p>In <a href="/2017/08/21/Write-the-first-Vue-js-Component-Unit-Test-in-Jest/">Write the first Vue.js Component Unit Test in Jest</a> we’ve seen how to use Shallow Rendering to test a component in isolation, preventing the components sub-tree from rendering.</p><p>But in some cases, we could want to test components that behave as a group, or <a href="http://atomicdesign.bradfrost.com/chapter-2/#molecules" target="_blank" rel="external">molecules</a> as stated in Atomic Design. Keep in mind that this apply to <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0" target="_blank" rel="external">Presentational Components</a>, since they’re unaware of app state and logic. In most case, you’d want to use Shallow Rendering for Container components.</p><h2 id="Adding-a-Message-Component"><a href="#Adding-a-Message-Component" class="headerlink" title="Adding a Message Component"></a>Adding a Message Component</h2><p>For the case of a Message and MessageList components, apart from writing their own unit tests, we could want to test them both as a unit as well.</p><p>Let’s start by creating <code>components/Message.vue</code>:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>  export default {    props: ['message']  }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>And update <code>components/MessageList.vue</code> to use it:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Message</span> <span class="token attr-name">:message</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message in messages<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>import Message from './Message'export default {  props: ['messages'],  components: {    Message  }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="Testing-MessageList-with-Message-Component"><a href="#Testing-MessageList-with-Message-Component" class="headerlink" title="Testing MessageList with Message Component"></a>Testing MessageList with Message Component</h2><p>To test MessageList with Deep Rendering, we just need to use <code>mount</code> instead of <code>shallow</code> in the previously created <code>test/MessageList.test.js</code>:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-test-utils'</span><span class="token keyword">import</span> MessageList <span class="token keyword">from</span> <span class="token string">'../src/components/MessageList'</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'MessageList.test.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> cmp  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    cmp <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>MessageList<span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Beaware that props is overriden using `propsData`</span>      propsData<span class="token punctuation">:</span> <span class="token punctuation">{</span>        messages<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cat'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'has received ["Cat"] as the message property'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>messages<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Cat'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'has the expected html structure'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><p>Btw, have you realized about the <code>beforeEach</code> thing? That’s a very clean way to create a clean component before each test, which is very important in unit testing, since it defines that test shouldn’t depend on each other.</p></blockquote><p>Both <code>mount</code> and <code>shallow</code> use exactly the same API, the difference is in the rendering. I’ll show you progressively the API along in this series.</p><p>If you run <code>npm t</code> you’ll see the test are failing because the Snapshot doesn’t match for <code>MessageList.test.js</code>. To regenerate them, run it with <code>-u</code> option:</p><pre><code>npm t -- -u</code></pre><p>Then if you open and inspect <code>test/__snapshots__/MessageList.test.js.snap</code>, you’ll see the <code>class=&quot;message&quot;</code> is there, meaning the component has been rendered.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Jest Snapshot v1, https://goo.gl/fbAQLP</span>exports<span class="token punctuation">[</span><span class="token template-string"><span class="token string">`MessageList.test.js has the expected html structure 1`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;ul>  &lt;li    class="message"  >    Cat  &lt;/li>&lt;/ul>`</span></span><span class="token punctuation">;</span></code></pre><p>Keep in mind to <strong>avoid deep rendering when there can be side effects</strong>, since the children component hooks, such <code>created</code> and <code>mount</code> will be triggered, and there can be HTTP calls or other side effects there that we don’t want to be called. If you wanna try what I’m saying, add to the <code>Message.vue</code> component a <code>console.log</code> in the created hook:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'CREATED!'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Then if you run the tests again with <code>npm t</code>, you’ll see the <code>&quot;CREATED!&quot;</code> text in the terminal output. So, be cautious.</p><p>You can find the <a href="https://github.com/alexjoverm/vue-testing-series/tree/https://github.com/alexjoverm/vue-testing-series/tree/Test-fully-rendered-Vue-js-Components-in-Jest" target="_blank" rel="external">full example on Github</a>.</p>]]></content>
    
    <summary type="html">
    
      Let&#39;s see how to use vue-test-utils to test a fully rendered component tree.
    
    </summary>
    
    
      <category term="VueJS" scheme="http://alexjoverm.github.io/tags/VueJS/"/>
    
      <category term="JavaScript" scheme="http://alexjoverm.github.io/tags/JavaScript/"/>
    
      <category term="Testing" scheme="http://alexjoverm.github.io/tags/Testing/"/>
    
  </entry>
  
  <entry>
    <title>Write the first Vue.js Component Unit Test in Jest</title>
    <link href="http://alexjoverm.github.io/2017/08/21/Write-the-first-Vue-js-Component-Unit-Test-in-Jest/"/>
    <id>http://alexjoverm.github.io/2017/08/21/Write-the-first-Vue-js-Component-Unit-Test-in-Jest/</id>
    <published>2017-08-21T06:25:40.000Z</published>
    <updated>2017-12-11T11:06:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>Learn how to write unit tests with the official VueJS tools and the Jest framework.</p><a id="more"></a><p><a href="https://github.com/vuejs/vue-test-utils" target="_blank" rel="external">vue-test-utils</a>, the official VueJS testing library and based on <a href="https://github.com/eddyerburgh/avoriaz" target="_blank" rel="external">avoriaz</a>, is just around the corner. <a href="https://twitter.com/EddYerburgh" target="_blank" rel="external">@EddYerburgh</a> is indeed doing a very good job creating it. It provides all necessary tooling for making easy to write unit test in a VueJS application.</p><p><a href="https://facebook.github.io/jest" target="_blank" rel="external">Jest</a>, on the other side, is the testing framework developed at Facebook, which makes testing a breeze, with awesome features such as:</p><ul><li>Almost no config by default</li><li>Very cool interactive mode</li><li>Run tests in parallel</li><li>Spies, stubs and mocks out of the box</li><li>Built in code coverage</li><li>Snapshot testing</li><li>Module mocking utilities</li></ul><p>Probably you’ve already written test without this tools, and just by using karma + mocha + chai + sinon + …, but you’ll see how much easier it can be 😉.</p><h2 id="Set-up-a-vue-test-sample-project"><a href="#Set-up-a-vue-test-sample-project" class="headerlink" title="Set up a vue-test sample project"></a>Set up a vue-test sample project</h2><p>Let’s start by creating a new project using <a href="https://github.com/vuejs/vue-cli" target="_blank" rel="external"><code>vue-cli</code></a> answering NO to all yes/no questions:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g vue-clivue init webpack vue-test<span class="token function">cd</span> vue-test</code></pre><p>Then we’ll need to install some dependencies:</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Install dependencies</span><span class="token function">npm</span> i -D jest jest-vue-preprocessor babel-jest</code></pre><p><a href="https://github.com/vire/jest-vue-preprocessor" target="_blank" rel="external"><code>jest-vue-preprocessor</code></a> is needed for making jest understand <code>.vue</code> files, and <a href="https://github.com/babel/babel-jest" target="_blank" rel="external"><code>babel-jest</code></a> for the integration with Babel.</p><p>As per <code>vue-test-utils</code>, it <del>hasn’t been released yet, but for now you can add it to your <code>package.json</code> from the source</del>:</p><p><strong>Update (2017/10/10)</strong>: it can be installed already from npm, since <code>beta.1</code> has been published.</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -D vue-test-utils</code></pre><p>Let’s add the following Jest configuration in the <code>package.json</code>:</p><pre class=" language-json"><code class="language-json">...<span class="token property">"jest"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"moduleNameMapper"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"^vue$"</span><span class="token operator">:</span> <span class="token string">"vue/dist/vue.common.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"moduleFileExtensions"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"js"</span><span class="token punctuation">,</span>    <span class="token string">"vue"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"transform"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"^.+\\.js$"</span><span class="token operator">:</span> <span class="token string">"&lt;rootDir>/node_modules/babel-jest"</span><span class="token punctuation">,</span>    <span class="token property">".*\\.(vue)$"</span><span class="token operator">:</span> <span class="token string">"&lt;rootDir>/node_modules/jest-vue-preprocessor"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>...</code></pre><p><code>moduleFileExtensions</code> will tell Jest which extensions to look for, and <code>transform</code> which preprocessor to use for a file extension.</p><p>At last, add a <code>test</code> script to the <code>package.json</code>:</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"jest"</span><span class="token punctuation">,</span>    ...  <span class="token punctuation">}</span><span class="token punctuation">,</span>  ...<span class="token punctuation">}</span></code></pre><h2 id="Testing-a-Component"><a href="#Testing-a-Component" class="headerlink" title="Testing a Component"></a>Testing a Component</h2><p>I’ll be using Single File Components here, and I haven’t checked if it works by splitting them in their own <code>html</code>, <code>css</code> or <code>js</code> files, so let’s assume you’re doing that as well.</p><p>First create a <code>MessageList.vue</code> component under <code>src/components</code>:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message in messages<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            {{ message }}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>export default {  name: 'list',  props: ['messages']}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>And update <code>App.vue</code> to use it, as follows:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MessageList</span> <span class="token attr-name">:messages</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>messages<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>import MessageList from './components/MessageList'export default {  name: 'app',  data: () => ({ messages: ['Hey John', 'Howdy Paco'] }),  components: {    MessageList  }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>We have already a couple of components that we can test. Let’s create a <code>test</code> folder under the project root, and a <code>App.test.js</code>:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'../src/App'</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'App.test.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> cmp<span class="token punctuation">,</span> vm  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    cmp <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Create a copy of the original component</span>    vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">cmp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Replace data value with this fake data</span>        messages<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cat'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Instances and mounts the component</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'equals messages to ["Cat"]'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>messages<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Cat'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Right now, if we run <code>npm test</code> (or <code>npm t</code> as a shorthand version), the test should run and pass. Since we’re modifying the tests, let’s better run it in <strong>watch mode</strong>:</p><pre class=" language-shell"><code class="language-shell">npm t -- --watch</code></pre><h3 id="The-problem-with-nested-components"><a href="#The-problem-with-nested-components" class="headerlink" title="The problem with nested components"></a>The problem with nested components</h3><p>This test is too simple. Let’s check that the output is the expected as well. For that we can use the amazing Snapshots feature of Jest, that will generate a snapshot of the output and check it against in the upcoming runs. Add after the previous <code>it</code> in <code>App.test.js</code>:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'has the expected html structure'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">expect</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>That will create a <code>test/__snapshots__/App.test.js.snap</code> file. Let’s open it and inspect it:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Jest Snapshot v1, https://goo.gl/fbAQLP</span>exports<span class="token punctuation">[</span><span class="token template-string"><span class="token string">`App.test.js has the expected html structure 1`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;div  id="app">  &lt;ul>    &lt;li>      Cat    &lt;/li>  &lt;/ul>&lt;/div>`</span></span><span class="token punctuation">;</span></code></pre><p>In case you haven’t noticed, there is a big problem here: the <code>MessageList</code> component has been rendered as well. <strong>Unit tests must be tested as an independent unit</strong>, meaning that in <code>App.test.js</code> we wanna test <code>App</code> component and don’t care at all about anything else.</p><p>This can be the reason of several problems. Imagine for example, that the children components (<code>MessageList</code> in this case) perform side effect operations on the <code>created</code> hook, such as calling <code>fetch</code>, a Vuex action or state changes? That’s something we definitely don’t want.</p><p>Luckily, <strong>Shallow Rendering</strong> solves this nicely.</p><h3 id="What-is-Shallow-Rendering"><a href="#What-is-Shallow-Rendering" class="headerlink" title="What is Shallow Rendering?"></a>What is Shallow Rendering?</h3><p><a href="http://airbnb.io/enzyme/docs/api/shallow.html" target="_blank" rel="external">Shallow Rendering</a> is a technique that assures your component is rendering without children. This is useful for:</p><ul><li>Testing only the component you want to test (that’s what Unit Test stands for)</li><li>Avoid side effects that children components can have, such as making HTTP calls, calling store actions…</li></ul><h2 id="Testing-a-Component-with-vue-test-utils"><a href="#Testing-a-Component-with-vue-test-utils" class="headerlink" title="Testing a Component with vue-test-utils"></a>Testing a Component with vue-test-utils</h2><p><code>vue-test-utils</code> provide us with Shallow Rendering among other features. We could rewrite the previous test as follows:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> shallow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-test-utils'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'../src/App'</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'App.test.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> cmp  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    cmp <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Create a shallow instance of the component</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        messages<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cat'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'equals messages to ["Cat"]'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Within cmp.vm, we can access all Vue instance methods</span>    <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>messages<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Cat'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'has the expected html structure'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>And now, if you’re still running Jest in watching mode, you’ll see the test still pass, but the Snapshot doesn’t match. Press <code>u</code> to regenerate it. Open and inspect it again:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Jest Snapshot v1, https://goo.gl/fbAQLP</span>exports<span class="token punctuation">[</span><span class="token template-string"><span class="token string">`App.test.js has the expected html structure 1`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;div  id="app">  &lt;!--  -->&lt;/div>`</span></span><span class="token punctuation">;</span></code></pre><p>You see? Now no children have been rendered and we tested the <code>App</code> component <strong>fully isolated</strong> from the component tree. Also, if you have any <code>created</code> or whatever hooks in the children components, they haven’t been called either 😉.</p><p>If you’re curious about <strong>how shallow render is implemented</strong>, check out the <a href="https://github.com/vuejs/vue-test-utils/blob/master/src/lib/stub-components.js" target="_blank" rel="external">source code</a> and you’ll see that basically is stubbing the <code>components</code> key, the <code>render</code> method and the lifecycle hooks.</p><p>In the same vein, you can implement the <code>MessageList.test.js</code> test as follows:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> shallow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-test-utils'</span><span class="token keyword">import</span> MessageList <span class="token keyword">from</span> <span class="token string">'../src/components/MessageList'</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'MessageList.test.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> cmp  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    cmp <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span>MessageList<span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Beaware that props is overriden using `propsData`</span>      propsData<span class="token punctuation">:</span> <span class="token punctuation">{</span>        messages<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cat'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'has received ["Cat"] as the message property'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>messages<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Cat'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'has the expected html structure'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>cmp<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Find the <a href="https://github.com/alexjoverm/vue-testing-series/tree/lesson-1" target="_blank" rel="external">full example on Github</a>.</p>]]></content>
    
    <summary type="html">
    
      Learn how to write unit tests for VueJS components with the official tools and the Jest framework.
    
    </summary>
    
    
      <category term="VueJS" scheme="http://alexjoverm.github.io/tags/VueJS/"/>
    
      <category term="JavaScript" scheme="http://alexjoverm.github.io/tags/JavaScript/"/>
    
      <category term="Testing" scheme="http://alexjoverm.github.io/tags/Testing/"/>
    
  </entry>
  
  <entry>
    <title>Apply infinite operations to an RxJS Observable</title>
    <link href="http://alexjoverm.github.io/2017/08/14/Apply-infinite-operations-to-an-RxJS-Observable/"/>
    <id>http://alexjoverm.github.io/2017/08/14/Apply-infinite-operations-to-an-RxJS-Observable/</id>
    <published>2017-08-14T06:27:38.000Z</published>
    <updated>2017-08-14T10:22:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Learn how easy is to apply a set of operations to a RxJS Observable in JavaScript</p><a id="more"></a><img src="/2017/08/14/Apply-infinite-operations-to-an-RxJS-Observable/rxjs.png" alt="RxJS" title="RxJS"><p>This week, my friend <a href="https://twitter.com/alejandro_such" target="_blank" rel="external">@alejandro_such</a> asked me about how to apply infinite operations to an <a href="http://reactivex.io/rxjs/" target="_blank" rel="external">RxJS</a> observable. Honestly, is not something I stumbled upon before, but every single case you need to solve in RxJS feels like a new challenge. That makes room to write a RxJS cookbook, but that’s not why you’re reading this today 😉.</p><p><em>Note: you need a bit of RxJS knowledge to follow up the article</em></p><h2 id="The-problem"><a href="#The-problem" class="headerlink" title="The problem"></a>The problem</h2><p>We’re used to see and write <a href="http://reactivex.io/rxjs/manual/overview.html#operators" target="_blank" rel="external">Observables operators</a> in a chain:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> stream <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>stream  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> val <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> val <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Res: "</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Res: 2</span></code></pre><p>Now imagine you need to apply an undetermined set of operations. In that case you cannot chain them anymore. One could write the following code:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> sum <span class="token operator">=</span> val <span class="token operator">=</span><span class="token operator">></span> val <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">const</span> fns <span class="token operator">=</span> <span class="token punctuation">[</span>sum<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> sum<span class="token punctuation">]</span><span class="token keyword">const</span> stream <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>fns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fn <span class="token operator">=</span><span class="token operator">></span> stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span>stream<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Res: "</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Expected output ==> Res: 3</span><span class="token comment" spellcheck="true">// Actual output ==> Res: 0</span></code></pre><p>How’s it possible that we added 3 map operations, and we get <code>Res: 0</code>? It’s like we didn’t do anything at all.</p><p>Simple: because <strong>observables are immutable</strong>. So, whenever you apply an operator, it’s returning a new observable. Avoiding side effects is one point of FP (Functional Programming), and RxJS is a FRP (Functional Reactive Programming) library. It’s a common pitfall to think that the operators return a mutated version of their same instance.</p><h2 id="The-solution"><a href="#The-solution" class="headerlink" title="The solution"></a>The solution</h2><p>We need to store the new observable returned by every operator, and apply the next operator over that one. A simple way, following the previous example:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> sum <span class="token operator">=</span> val <span class="token operator">=</span><span class="token operator">></span> val <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">const</span> fns <span class="token operator">=</span> <span class="token punctuation">[</span>sum<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> sum<span class="token punctuation">]</span><span class="token keyword">const</span> stream <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>fns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fn <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  stream <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// update with new observable</span><span class="token punctuation">}</span><span class="token punctuation">)</span>stream<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Res: "</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Or, if we wanna go functional and avoid side effects, <code>reduce</code> plays very well here:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Try yourself at http://jsbin.com/qucihequdu/edit?js,console</span><span class="token keyword">const</span> sum <span class="token operator">=</span> val <span class="token operator">=</span><span class="token operator">></span> val <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">const</span> fns <span class="token operator">=</span> <span class="token punctuation">[</span>sum<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> sum<span class="token punctuation">]</span><span class="token keyword">const</span> original <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">const</span> mapped <span class="token operator">=</span> fns<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acum<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    acum<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token function">fn</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Apply and return new observable</span><span class="token punctuation">,</span> original<span class="token punctuation">)</span>mapped<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Res: "</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Go to <a href="http://jsbin.com/qucihequdu/edit?js,console" target="_blank" rel="external">this jsbin</a> and start playing with it!</p>]]></content>
    
    <summary type="html">
    
      Learn how easy is to apply a set of operations to a RxJS Observable in JavaScript
    
    </summary>
    
    
      <category term="RxJS" scheme="http://alexjoverm.github.io/tags/RxJS/"/>
    
      <category term="JavaScript" scheme="http://alexjoverm.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>How I made a Progressive Web App out of my Blog</title>
    <link href="http://alexjoverm.github.io/2017/08/07/How-I-made-a-Progressive-Web-App-out-of-my-Blog/"/>
    <id>http://alexjoverm.github.io/2017/08/07/How-I-made-a-Progressive-Web-App-out-of-my-Blog/</id>
    <published>2017-08-07T10:42:29.000Z</published>
    <updated>2017-08-09T17:32:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>One day I wanted to learn about PWA (Progressive Web App), so I though: What’s better than doing it with my own blog?</p><a id="more"></a><p>I think that’s something developers do: when we wanna learn something, we go and get our hands dirty, right?</p><p>The first thing I wanted was to get <strong>metrics and insights</strong> on the blog at that point. For that I used <a href="https://github.com/GoogleChrome/lighthouse" target="_blank" rel="external">Lighthouse</a> in its Chrome extension version.</p><img src="/2017/08/07/How-I-made-a-Progressive-Web-App-out-of-my-Blog/pwa_before.png" alt="Lighthouse: metrics before" title="Lighthouse: metrics before"><p>By default, the performance stats were quite good. I wasn’t surprised: my blog runs on <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>, a NodeJS static site generator which I’m in love with due to its blazing speed, easiness of deployment, and familiarity with NodeJS and its ecosystem.</p><p>For the PWA metrics, it was half-way, and I’ve never payed attention to that. Let’s see what steps I did to make it 100% a Progressive Web App.</p><h2 id="1-Create-a-Web-App-Manifest-and-Icons"><a href="#1-Create-a-Web-App-Manifest-and-Icons" class="headerlink" title="1. Create a Web App Manifest and Icons"></a>1. Create a Web App Manifest and Icons</h2><p>The <a href="https://developer.mozilla.org/en-US/docs/Web/Manifest" target="_blank" rel="external">Web App Manifest</a> is a JSON file designed to describe a Web Application. This is a excerpt of my <a href="https://github.com/alexjoverm/blog/blob/master/themes/beautiful-hexo/source/manifest.json" target="_blank" rel="external"><code>manifest.json</code></a>:</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Alex Jover Blog"</span><span class="token punctuation">,</span>  <span class="token property">"short_name"</span><span class="token operator">:</span> <span class="token string">"AlexJ Blog"</span><span class="token punctuation">,</span>  <span class="token property">"theme_color"</span><span class="token operator">:</span> <span class="token string">"#008aff"</span><span class="token punctuation">,</span>  <span class="token property">"background_color"</span><span class="token operator">:</span> <span class="token string">"#ffffff"</span><span class="token punctuation">,</span>  <span class="token property">"display"</span><span class="token operator">:</span> <span class="token string">"standalone"</span><span class="token punctuation">,</span>  <span class="token property">"icons"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"images/icons/icon-72x72.png"</span><span class="token punctuation">,</span>      <span class="token property">"sizes"</span><span class="token operator">:</span> <span class="token string">"72x72"</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"image/png"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  ...</code></pre><p>I think the names are pretty descriptive by themselves. Make sure at least you add the <code>name</code>, <code>short_name</code> and <code>icons</code> fields.</p><p>Some other fields you may be interested in, are <a href="https://developer.mozilla.org/es/docs/Web/Manifest#start_urlhttps://developer.mozilla.org/es/docs/Web/Manifest#start_url" target="_blank" rel="external"><code>start_url</code></a> and <a href="https://developer.mozilla.org/es/docs/Web/Manifest#scope" target="_blank" rel="external"><code>scope</code></a>.</p><p>As per the <strong>icons</strong>, you need to generate them in several sizes. For that I’ve used <a href="https://app-manifest.firebaseapp.com/" target="_blank" rel="external">this Web App Manifest generator</a>, which also helps you creating the <code>manifest.json</code> file. I’ve downloaded the zip file from that web, unzipped it and moved the files to where they belong. Then updated the <code>src</code> property of the <code>icons</code> array as needed.</p><p>Finally, you must include it with a <code>meta</code> tag in the <a href="https://github.com/alexjoverm/blog/blob/master/themes/beautiful-hexo/layout/partial/head.jade" target="_blank" rel="external">head of the HTML</a> (you’ll see my examples are in Jade/Pug, but I’ll write it here in pure HTML):</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>manifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/manifest.json<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h2 id="2-Add-meta-tags"><a href="#2-Add-meta-tags" class="headerlink" title="2. Add meta tags"></a>2. Add meta tags</h2><p>You need to add <a href="https://developers.google.com/web/fundamentals/design-and-ui/browser-customization/" target="_blank" rel="external">some meta tags</a> so all supported browsers would appropriately understand it as a Progressive Web App. The <a href="https://github.com/alexjoverm/blog/blob/master/themes/beautiful-hexo/layout/partial/head.jade#L13-L23" target="_blank" rel="external">tags I added</a> are:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/icons/icon-152x152.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- theme-color defines the top bar color (blue in my case)--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>theme-color<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#008aff<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- Add to home screen for Safari on iOS--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-mobile-web-app-capable<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-mobile-web-app-status-bar-style<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-mobile-web-app-title<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Alex Jover Blog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/icons/icon-152x152.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- Add to home screen for Windows--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msapplication-TileImage<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/icons/icon-152x152.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msapplication-TileColor<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>As you can see, some platforms have their own meta tags.</p><h2 id="3-Create-a-Pre-cache-Service-Worker"><a href="#3-Create-a-Pre-cache-Service-Worker" class="headerlink" title="3. Create a Pre-cache Service Worker"></a>3. Create a Pre-cache Service Worker</h2><p>Creating a <a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external">Service Worker</a> could be a very tedious job, they’re very versatile and allow to do a lot of things.</p><p>For most cases, we wanna use them to cache all the static files, so our app can work offline. There are different strategies to do this, they all are explained very well in the <a href="https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/" target="_blank" rel="external">Offline Cookbook</a>, written by <a href="https://twitter.com/jaffathecake" target="_blank" rel="external">Jake Archibald</a> at Google. Another resource worth checking is <a href="https://serviceworke.rs/" target="_blank" rel="external">serviceworke.rs</a>.</p><p>Still, it’s quite some work to create and maintain a Service Worker for this purpose and every project. That’s where <a href="https://github.com/GoogleChrome/sw-precache" target="_blank" rel="external">sw-precache</a> comes in handy, a tool that automatically creates a pre-cache Service Worker for a set of static assets using the <a href="https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network" target="_blank" rel="external">cache-first</a> strategy.</p><p>If you’re using Webpack in your project, you’re lucky to have a <a href="https://github.com/goldhand/sw-precache-webpack-plugin" target="_blank" rel="external">sw-precache plugin</a> that you can plug in your conf to create a Service Worker for your bundled assets automatically.</p><p>In my case, I’m not using webpack, gulp or anything. Just a modified version of <a href="https://github.com/twoyao/beautiful-hexo" target="_blank" rel="external">Beautiful Hexo</a> theme with plain css, js and images.</p><p>But that’s no problem. You can use <strong>sw-precache command line utility</strong>. For that, I created first a <a href="https://github.com/alexjoverm/blog/blob/master/sw-config.js" target="_blank" rel="external">sw-config.js</a> file, indicating the assets to cache and the prefix to strip out, since the service worker will be under the public folder as well:</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  staticFileGlobs<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">'public/css/**.css'</span><span class="token punctuation">,</span>    <span class="token string">'public/**/**.html'</span><span class="token punctuation">,</span>    <span class="token string">'public/**/**.jpg'</span><span class="token punctuation">,</span>    <span class="token string">'public/**/**.png'</span><span class="token punctuation">,</span>    <span class="token string">'public/js/**.js'</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  stripPrefix<span class="token punctuation">:</span> <span class="token string">'public'</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>Then simply running <code>sw-precache --config sw-config.js</code>, it creates a <a href="https://github.com/alexjoverm/blog/blob/master/service-worker.js" target="_blank" rel="external">service-worker.js</a> file ready to use.</p><p><em>Note: keep in mind Service Workers run only in localhost or in a HTTPS url</em></p><h2 id="4-Register-the-Service-Worker"><a href="#4-Register-the-Service-Worker" class="headerlink" title="4. Register the Service Worker"></a>4. Register the Service Worker</h2><p>Once created a <code>service-worker.js</code> file, you need to register it in your app. For that, I used a <a href="https://github.com/GoogleChrome/sw-precache/blob/master/demo/app/js/service-worker-registration.js" target="_blank" rel="external">battle tested service-worker-registration.js file</a> located on the sw-precache repo.</p><p>Then I simply copied it <a href="https://github.com/alexjoverm/blog/blob/master/themes/beautiful-hexo/source/js/sw-register.js" target="_blank" rel="external">to my repo</a> where the js files of the theme are.</p><h2 id="5-Glue-all-together"><a href="#5-Glue-all-together" class="headerlink" title="5. Glue all together"></a>5. Glue all together</h2><p>So far I’ve got needed for building an offline ready and installable Progressive Web App:</p><ul><li>Having a <code>manifest.json</code> with icons</li><li>Adding <code>meta</code> tags</li><li>Create a Service Worker for pre-caching</li><li>Run in on HTTPS (I’m using Github Pages)</li></ul><p>Then only thing is, every time I post or change anything from the theme, I must re-create the precache service worker file, which is a bit repetitive.</p><p>That’s why I wrote a extremely <a href="https://github.com/alexjoverm/blog/blob/master/deploy.sh" target="_blank" rel="external">simple script</a>:</p><pre class=" language-bash"><code class="language-bash">hexo generate -f <span class="token comment" spellcheck="true"># re-generates the static assets</span>sw-precache --config sw-config.js <span class="token comment" spellcheck="true"># creates the service worker</span><span class="token function">cp</span> service-worker.js public <span class="token comment" spellcheck="true"># copies it to the static site folder</span>hexo deploy <span class="token comment" spellcheck="true"># deploys it to github pages</span></code></pre><p>So as before I only needed to do <code>hexo deploy -g</code>, which generates the <code>public</code> folder and deploys it, now I had to add 2 steps in between for the service worker creation, and using this script it’s very comfortable to do.</p><h2 id="Checking-out"><a href="#Checking-out" class="headerlink" title="Checking out"></a>Checking out</h2><p>Running again a Lighthouse audit, I saw that was all to get the 100 PWA metrics, plus some extra performance and accessibility improvements I made:</p><img src="/2017/08/07/How-I-made-a-Progressive-Web-App-out-of-my-Blog/pwa_after.png" alt="Lighthouse: metrics after" title="Lighthouse: metrics after"><p>When I opened from my Android phone on Chrome, I saw the <em>“Add to Home”</em> banner, which made me very happy to see my Blog being <strong>installable such a native app</strong>:</p><p><div class="img-vertical"><br><img src="/2017/08/07/How-I-made-a-Progressive-Web-App-out-of-my-Blog/pwa_banner.png" alt="Install banner" title="Install banner"></div></p><div><p>And best of all, the blog is <strong>fully working offline</strong>, so go try out turning off your internet connection and see the magic of a working Progressive Web App :)</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>It’s amazing to learn new stuff, specially such early technologies as Progressive Web Apps, but is even better to learn it by applying it to a real project of yourself!</p></div>]]></content>
    
    <summary type="html">
    
      I wanted to learn about PWA (Progressive Web Apps), so I decided to make this blog a PWA
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://alexjoverm.github.io/tags/JavaScript/"/>
    
      <category term="PWA" scheme="http://alexjoverm.github.io/tags/PWA/"/>
    
  </entry>
  
  <entry>
    <title>Lazy Loading in Vue using Webpack&#39;s Code Splitting</title>
    <link href="http://alexjoverm.github.io/2017/07/16/Lazy-load-in-Vue-using-Webpack-s-code-splitting/"/>
    <id>http://alexjoverm.github.io/2017/07/16/Lazy-load-in-Vue-using-Webpack-s-code-splitting/</id>
    <published>2017-07-15T23:05:47.000Z</published>
    <updated>2017-08-06T13:21:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>When a <a href="https://vuejs.org/" target="_blank" rel="external">Vue</a> app gets large, lazy loading components, routes or <a href="https://vuex.vuejs.org/en" target="_blank" rel="external">Vuex</a> modules using <a href="https://webpack.js.org/guides/lazy-loading/" target="_blank" rel="external">Webpack’s code splitting</a> will boost it by loading pieces of code only when needed.</p><a id="more"></a><img src="/2017/07/16/Lazy-load-in-Vue-using-Webpack-s-code-splitting/axe.jpg" alt="Axe" title="Axe"><p>We could apply lazy loading and code splitting in 3 different levels in a Vue app:</p><ul><li>Components, also known as <a href="https://vuejs.org/v2/guide/components.html#Async-Components" target="_blank" rel="external">async components</a></li><li>Router</li><li>Vuex modules</li></ul><p>But there is something they all have in common: they use <a href="https://github.com/tc39/proposal-dynamic-import" target="_blank" rel="external">dynamic import</a>, which is understood by Webpack since version 2.</p><h2 id="Lazy-load-in-Vue-components"><a href="#Lazy-load-in-Vue-components" class="headerlink" title="Lazy load in Vue components"></a>Lazy load in Vue components</h2><p>This is well explained in the <a href="https://egghead.io/lessons/load-components-when-needed-with-vue-async-components" target="_blank" rel="external">“Load components when needed with Vue async components”</a> on Egghead.</p><p>It’s as simple as using the <code>import</code> function when registering a component:</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'AsyncCmp'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./AsyncCmp'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>And using local registration:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'AsyncCmp'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./AsyncCmp'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>By wrapping the <code>import</code> function into an arrow function, Vue will execute it only when it gets requested, loading the module in that moment.</p><p>If the component importing is using a <a href="http://2ality.com/2014/09/es6-modules-final.html#named-exports-several-per-module" target="_blank" rel="external">named export</a>, you can use object destructuring on the returned Promise. For example, for the UiAlert component from <a href="https://github.com/JosephusPaye/Keen-UI" target="_blank" rel="external">KeenUI</a>:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span>components<span class="token punctuation">:</span> <span class="token punctuation">{</span>  UiAlert<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'keen-ui'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> UiAlert <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> UiAlert<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">...</span></code></pre><h2 id="Lazy-load-in-Vue-router"><a href="#Lazy-load-in-Vue-router" class="headerlink" title="Lazy load in Vue router"></a>Lazy load in Vue router</h2><p>Vue router has built in support for <a href="https://router.vuejs.org/en/advanced/lazy-loading.html" target="_blank" rel="external">lazy loading</a>. It’s as simple as importing your components with the <code>import</code> function. Say we wanna lazy load a Login component in the <em>/login</em> route:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Instead of: import Login from './login'</span><span class="token keyword">const</span> Login <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./login'</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Login <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="Lazy-load-a-Vuex-module"><a href="#Lazy-load-a-Vuex-module" class="headerlink" title="Lazy load a Vuex module"></a>Lazy load a Vuex module</h2><p>Vuex has a <code>registerModule</code> method that allow us to dynamically create Vuex modules. If we take into account that <code>import</code> function returns a promise with the ES Module as the payload, we could use it to lazy load a module:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token comment" spellcheck="true">// Assume there is a "login" module we wanna load</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./store/login'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>loginModule <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  store<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span> loginModule<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Lazy loading is made extremely simple with Vue and Webpack. Using what you’ve just read you can start splitting up your app in chunks from different sides and load them when needed, lightening the initial load of the app.</p>]]></content>
    
    <summary type="html">
    
      When a Vue app gets large, lazy loading components, routes or Vuex modules using Webpack&#39;s code splitting will boost it by loading pieces of code only when needed.
    
    </summary>
    
    
      <category term="VueJS" scheme="http://alexjoverm.github.io/tags/VueJS/"/>
    
      <category term="JavaScript" scheme="http://alexjoverm.github.io/tags/JavaScript/"/>
    
      <category term="Vuex" scheme="http://alexjoverm.github.io/tags/Vuex/"/>
    
      <category term="Webpack" scheme="http://alexjoverm.github.io/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Integrate TypeScript in your Vue project</title>
    <link href="http://alexjoverm.github.io/2017/06/28/Integrate-TypeScript-in-your-Vue-project/"/>
    <id>http://alexjoverm.github.io/2017/06/28/Integrate-TypeScript-in-your-Vue-project/</id>
    <published>2017-06-28T09:17:45.000Z</published>
    <updated>2017-08-06T13:21:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>You have a <a href="https://vuejs.org/" target="_blank" rel="external">Vue</a> project and you heard about all things <a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a> can help you with. You decide to start using TypeScript. Here you’ll see how to do that in an approachable and pragmatic way.</p><a id="more"></a><img src="/2017/06/28/Integrate-TypeScript-in-your-Vue-project/love.jpg" alt="Love" title="Love"><p>In this article we’ll assume you’re using SFC (Single File Components), but it could work as well even if you’re splitting them into multiple files. So… let’s get started!</p><h2 id="Integrating-TypeScript"><a href="#Integrating-TypeScript" class="headerlink" title="Integrating TypeScript"></a>Integrating TypeScript</h2><p>We’re gonna start from <a href="https://github.com/vuejs-templates/webpack" target="_blank" rel="external">Vue CLI Webpack’s template</a>, but it would work as well with the amazing <a href="https://github.com/vuejs-templates/pwa" target="_blank" rel="external">PWA template</a>. Don’t choose to use ESLint when you’re ask to:</p><pre class=" language-bash"><code class="language-bash">vue init webpack my-app <span class="token comment" spellcheck="true"># or: vue init pwa my-app</span><span class="token function">cd</span> my-app</code></pre><p>We have to do 4 steps:</p><h3 id="1-Create-a-tsconfig-json-file"><a href="#1-Create-a-tsconfig-json-file" class="headerlink" title="1. Create a tsconfig.json file"></a>1. Create a <code>tsconfig.json</code> file</h3><p>Let’s start with something very simple, later we’ll get back to the TypeScript configuration.</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"dom"</span><span class="token punctuation">,</span> <span class="token string">"es5"</span><span class="token punctuation">,</span> <span class="token string">"es2015"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"es2015"</span><span class="token punctuation">,</span>    <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"allowSyntheticDefaultImports"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>The most important part is the <code>allowSyntheticDefaultImports</code> setting. Since Vue types doesn’t use ES2015 default exports, this setting must be set to by-pass that. You can see more info in <a href="https://code.visualstudio.com/docs/languages/javascript#_common-questions" target="_blank" rel="external">this VSCode docs page</a>.</p><p>Setting <code>&quot;module&quot;: &quot;es2015&quot;</code> would make the code <a href="https://alexjoverm.github.io/2017/03/06/Tree-shaking-with-Webpack-2-TypeScript-and-Babel/">tree-shakeable</a> by producing ESM (EcmaScript Modules).</p><h3 id="2-Add-ts-loader-and-webpack-tweaks"><a href="#2-Add-ts-loader-and-webpack-tweaks" class="headerlink" title="2. Add ts-loader and webpack tweaks"></a>2. Add <code>ts-loader</code> and webpack tweaks</h3><p>Install <code>typescript</code> an <code>ts-loader</code> with npm:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -D typescript ts-loader</code></pre><p>Then open <code>build/webpack.base.conf.js</code>, and place the following code at <strong>the beginning</strong> of <code>module.rules</code>, right before than <code>vue-loader</code>:</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.ts$/</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules|vue\/src/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">"ts-loader"</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          appendTsSuffixTo<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">/</span>\<span class="token punctuation">.</span>vue$<span class="token operator">/</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">...</span></code></pre><p>In there, rename the entry to <code>.ts</code> and add it to the extensions:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span>entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>  app<span class="token punctuation">:</span> <span class="token string">'./src/main.ts'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">...</span>resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.ts'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">...</span></code></pre><h3 id="3-Add-es-module-true-to-build-vue-loader-conf-js"><a href="#3-Add-es-module-true-to-build-vue-loader-conf-js" class="headerlink" title="3. Add es-module: true to build/vue-loader.conf.js"></a>3. Add <code>es-module: true</code> to <code>build/vue-loader.conf.js</code></h3><p>That will tell vue-loader to use ES instead of CJS (CommonJS) modules, as describe in <a href="https://github.com/vuejs/vue-loader/blob/master/docs/en/options.md#esmodule" target="_blank" rel="external">vue-loader docs</a>:</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  loaders<span class="token punctuation">:</span> utils<span class="token punctuation">.</span><span class="token function">cssLoaders</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    sourceMap<span class="token punctuation">:</span> isProduction      <span class="token operator">?</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>productionSourceMap      <span class="token punctuation">:</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>cssSourceMap<span class="token punctuation">,</span>    extract<span class="token punctuation">:</span> isProduction  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  esModule<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><h3 id="4-Use-TypeScript-in-files"><a href="#4-Use-TypeScript-in-files" class="headerlink" title="4. Use TypeScript in files"></a>4. Use TypeScript in files</h3><p>So you must do 2 things here:</p><ul><li>Rename <code>.js</code> to <code>.ts</code> extensions within the <code>src</code> folder</li><li>Use <code>lang=&quot;ts&quot;</code> on the <code>script</code> tag of you Vue file. For example in <code>App.vue</code>:</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>export default {  name: 'app'}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h3><p>If your editor is yelling at the line <code>import App from &#39;./App&#39;</code> in <code>main.js</code> file about not finding the App module, you can add a <code>vue-shim.d.ts</code> file to your project with the following content:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"*.vue"</span> <span class="token punctuation">{</span>  <span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> Vue<span class="token punctuation">}</span></code></pre><p>I’m using VSCode 1.13.1 and not seeing it, but I’ve seen it before.</p><h2 id="TSLint-Prettier…-Goddess"><a href="#TSLint-Prettier…-Goddess" class="headerlink" title="TSLint, Prettier… Goddess!"></a>TSLint, Prettier… Goddess!</h2><p>I’ve recorded <a href="https://egghead.io/lessons/typescript-use-prettier-with-tslint-without-conflicts-c39670eb" target="_blank" rel="external">a 2 min video on Egghead</a> where I explain how you can set up TSLint with Prettier without any conflicts. Go check it out!</p><h2 id="Ok-I-can-use-TypeScript…-so-now-what’s-next"><a href="#Ok-I-can-use-TypeScript…-so-now-what’s-next" class="headerlink" title="Ok, I can use TypeScript… so now what’s next?"></a>Ok, I can use TypeScript… so now what’s next?</h2><p>At this point, TypeScript could already point you out to some errors you haven’t noticed before by using built-in and third-party types and gives you a better dev experience by using type inference, as explained in <a href="https://slack.engineering/typescript-at-slack-a81307fa288d" target="_blank" rel="external">TypeScript at Slack</a>, an article telling how Slack moved their codebase to TypeScript.</p><p>Still, you must add your own types by using interfaces, types, enums, classes and whatever you need. That way you’ll add more type coverage that TypeScript will use to apply static typing, assuring type safety.</p><p>Ideally, you’d use the TypeScript 2.3 <code>strict</code> compiler option in your <code>tsconfig.json</code> because it’ll bring you the most type safety. <a href="https://twitter.com/mariusschulz" target="_blank" rel="external">Marius Schulz</a> has a <a href="https://blog.mariusschulz.com/2017/06/09/typescript-2-3-the-strict-compiler-option" target="_blank" rel="external">well explained article</a> about this. By TypeScript 2.3, the strict option is a group of 4 options, but in future releases it could add more:</p><ul><li><code>strictNullChecks</code></li><li><code>noImplicitAny</code></li><li><code>noImplicitThis</code></li><li><code>alwaysStrict</code></li></ul><p>However, if you have a medium/large codebase, using strict option will make you spend really a huge effort and time solving all the type shortage.</p><p>For that case, a good way to integrate TypeScript is to start with the most flexible configuration, and as you add more type coverage to your codebase, start to enable individually the flags mentioned above, till you get to the point that you can apply the <code>strict</code> option, so you can approach it in a pragmatic way.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>TypeScript brings you type safety to your codebase from the very start, but the more types you define, the more easy to detect bugs and errors and to make the code maintainable. Vue from version 2 is shipped with typings, so we can make use of them. They become more powerful when you use OOP (Object Oriented Programming) in Vue, but will see that in another post.</p>]]></content>
    
    <summary type="html">
    
      You have a Vue project and you heard about all things TypeScript can help you with. You decide to start using TypeScript. Here you&#39;ll see how to do that in an approachable and pragmatic way.
    
    </summary>
    
    
      <category term="VueJS" scheme="http://alexjoverm.github.io/tags/VueJS/"/>
    
      <category term="TypeScript" scheme="http://alexjoverm.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Use Prettier with TSLint and be happy</title>
    <link href="http://alexjoverm.github.io/2017/06/12/Use-Prettier-with-TSLint-and-be-happy/"/>
    <id>http://alexjoverm.github.io/2017/06/12/Use-Prettier-with-TSLint-and-be-happy/</id>
    <published>2017-06-12T14:36:23.000Z</published>
    <updated>2017-08-06T12:55:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/prettier/prettier" target="_blank" rel="external">Prettier</a> support for <a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a> just landed. Let’s see how <a href="https://github.com/alexjoverm/tslint-config-prettier" target="_blank" rel="external">tslint-config-prettier</a> helps to seamlessly combine it with <a href="https://palantir.github.io/tslint/" target="_blank" rel="external">TSLint</a>.</p><a id="more"></a><p><strong><em>Wait, a video explaining “Use Prettier with TSLint”?</em> Yes! Check it out on <a href="https://egghead.io/lessons/typescript-use-prettier-with-tslint-without-conflicts-c39670eb" target="_blank" rel="external">Egghead.io</a>!</strong></p><p>Recently, <a href="https://twitter.com/Vjeux" target="_blank" rel="external">@vjeux</a>, one of the authors of Prettier, announced TypeScript support in the following tweet:</p><div class="twitter-wrapper"><blockquote class="twitter-tweet"><a href="https://twitter.com/Vjeux/status/870670634908475392" target="_blank" rel="external"></a></blockquote></div><script async defer src="//platform.twitter.com/widgets.js" charset="utf-8"></script><p>That’s pretty amazing! I’ve just went and tried it out. I was so impressed by how magic the experience was that I’ve <a href="https://twitter.com/alexjoverm/status/871765191721197568" target="_blank" rel="external">completely removed TSLint</a> from <a href="https://github.com/alexjoverm/typescript-library-starter" target="_blank" rel="external">TypeScript library starter</a>.</p><h2 id="The-problem"><a href="#The-problem" class="headerlink" title="The problem"></a>The problem</h2><p>Prettier and TSLint collide, since they both take care of formatting. For the following code, TSLint will give us the error <code>[tslint] Multiple spaces found before &#39;{&#39;. (no-multi-spaces)</code>:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">DummyClass</span>      <span class="token punctuation">{</span>  food <span class="token operator">=</span> <span class="token string">'sandwitch'</span><span class="token punctuation">}</span></code></pre><p>But, when we run Prettier, the code is automatically formatted:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">DummyClass</span> <span class="token punctuation">{</span>  food <span class="token operator">=</span> <span class="token string">'sandwitch'</span><span class="token punctuation">}</span></code></pre><p>This makes the workflow pretty useless, since we’re getting linting errors that Prettier will solve.</p><h2 id="The-solution"><a href="#The-solution" class="headerlink" title="The solution"></a>The solution</h2><p>It’s very simple:</p><blockquote><p>Let Prettier take care of code formatting, and TSLint of the rest</p></blockquote><p>That’s why I’ve created <a href="https://github.com/alexjoverm/tslint-config-prettier" target="_blank" rel="external">tslint-config-prettier</a>. It disables all TSLint formatting related rules, as well as for <a href="https://github.com/palantir/tslint-react" target="_blank" rel="external">tslint-react</a> and <a href="https://github.com/buzinas/tslint-eslint-rules" target="_blank" rel="external">tslint-eslint-rules</a>.</p><p>The installation is straightforward, once you setup <a href="https://palantir.github.io/tslint/" target="_blank" rel="external">TSLint</a> and <a href="https://github.com/prettier/prettier" target="_blank" rel="external">Prettier</a>:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -D tslint-config-prettier</code></pre><p>Add it to the end of your <code>tslint.json</code> file:</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"tslint:latest"</span><span class="token punctuation">,</span>    <span class="token string">"tslint-config-prettier"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>Now we can use Prettier and TSLint without any problem!</p><img src="/2017/06/12/Use-Prettier-with-TSLint-and-be-happy/prettier.gif" alt="Using Prettier" title="Using Prettier"><p>I must thank <a href="https://twitter.com/Vjeux/status/871796320792608768" target="_blank" rel="external">@vjeux for pointing me out</a> to this solution and <a href="https://twitter.com/JBlaak" target="_blank" rel="external">@JBlack</a> for the time to <a href="https://github.com/alexjoverm/tslint-config-prettier/pull/1" target="_blank" rel="external">review tslint-config-prettier</a>.</p>]]></content>
    
    <summary type="html">
    
      Prettier support for TypeScript just landed. Let&#39;s see how tslint-config-prettier helps to seamlessly combine it with TSLint
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://alexjoverm.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Lookup Types: type-safe properties</title>
    <link href="http://alexjoverm.github.io/2017/04/11/Typescript-Lookup-Types-type-safe-properties/"/>
    <id>http://alexjoverm.github.io/2017/04/11/Typescript-Lookup-Types-type-safe-properties/</id>
    <published>2017-04-11T10:55:23.000Z</published>
    <updated>2017-08-06T12:55:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Typescript 2.1 introduced lookup types. What are they for? In which cases are they useful?</p><a id="more"></a><p><strong><em>Wait, a video explaining Lookup Types?</em> Yes! Check it out on <a href="https://egghead.io/instructors/alex-jover-morales" target="_blank" rel="external">Egghead.io</a>!</strong></p><p>That’s something I was wondering for a while. I read <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-1.html" target="_blank" rel="external">the official docs</a> and <a href="https://blog.mariusschulz.com/2017/01/06/typescript-2-1-keyof-and-lookup-types" target="_blank" rel="external">Marius Schulz post</a> where quite well explain it, but didn’t totally get the use of it. I needed to come across a real world case where I had to use it.</p><p>Then I made a <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/pull/14867" target="_blank" rel="external">PR to Jest on DefinitelyTyped</a> repository for adding the <code>spyOn</code> function introduced in <a href="https://facebook.github.io/jest/" target="_blank" rel="external">Jest 19</a>. That’s when I finally understood it.</p><h2 id="What-exactly-are-Lookup-types"><a href="#What-exactly-are-Lookup-types" class="headerlink" title="What exactly are Lookup types?"></a>What exactly are Lookup types?</h2><p>Basically a lookup type defines an indexed property type of another type. They are created using the <code>keyof</code> operator, which returns an union of string literals:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// Given a Bike type</span><span class="token keyword">interface</span> <span class="token class-name">Bike</span> <span class="token punctuation">{</span>  model<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  weight<span class="token punctuation">:</span> <span class="token keyword">number</span>  ride<span class="token punctuation">:</span> <span class="token keyword">Function</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Get all prop names of Bike</span>type BikePropNames <span class="token operator">=</span> keyof Bike <span class="token comment" spellcheck="true">// "model" | "weight" | "ride"</span><span class="token comment" spellcheck="true">// We can get the all prop types of Bike as well</span>type BikePropTypes <span class="token operator">=</span> Bike<span class="token punctuation">[</span>BikePropNames<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// "string" | "number" | "Function"</span></code></pre><p>Typescript infers the string literals by looking up on the types used, either for the <code>keyof</code> operator and element access.</p><h3 id="OK…-But-when-can-this-be-useful"><a href="#OK…-But-when-can-this-be-useful" class="headerlink" title="OK… But when can this be useful?"></a>OK… But when can this be useful?</h3><p>Let’s take the <code>jest.spyOn</code> function, as an example. The function works takes an object as a first parameter, and the method you wanna spy on as a second parameter. I’ve <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/pull/14867/commits/46f23ff159f5944f09d366b4385b4df9bcef3ed2" target="_blank" rel="external">first wrote</a> it like this:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">spyOn</span><span class="token punctuation">(</span>object<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> method<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span></code></pre><p>Yes, this would work. But what if, given the <code>Bike</code> example, I use a non-existent method as a second parameter?</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> bike<span class="token punctuation">:</span> Bike <span class="token operator">=</span> <span class="token punctuation">{</span>  model<span class="token punctuation">:</span> <span class="token string">'Orbea X5'</span><span class="token punctuation">,</span>  weigth<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  ride<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'riding!!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// No TS error, but it would fail, since 'blabla' is not a method of bike</span><span class="token function">spyOn</span><span class="token punctuation">(</span>bike<span class="token punctuation">,</span> <span class="token string">'blabla'</span><span class="token punctuation">)</span></code></pre><p>This is not type-safe, ts will not complain at all. How can we do this type-safe?</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> spyOn<span class="token operator">&lt;</span>O<span class="token punctuation">,</span> M <span class="token keyword">extends</span> <span class="token class-name">keyof</span> O<span class="token operator">></span><span class="token punctuation">(</span>object<span class="token punctuation">:</span> O<span class="token punctuation">,</span> method<span class="token punctuation">:</span> M<span class="token punctuation">)</span><span class="token operator">...</span><span class="token function">spyOn</span><span class="token punctuation">(</span>bike<span class="token punctuation">,</span> <span class="token string">'blabla'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// now TS throws an error :)</span><span class="token function">spyOn</span><span class="token punctuation">(</span>bike<span class="token punctuation">,</span> <span class="token string">'ride'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// This works</span></code></pre><p>If you still don’t understand the <code>spyOn</code> declaration, basically is saying:</p><ul><li><code>&lt;O, M extends keyof O&gt;</code>: <code>O</code> is any object, and <code>M</code> is a property of <code>O</code></li><li><code>object: O, method: M</code>: we expect <code>O</code> (any object) as a first parameter, and <code>M</code> (a property of <code>O</code> as a second)</li></ul><p>Do you see now the power of lookup types? You can dynamically generate string literal union types! That’ll make your type definitions much more accurate ;)</p>]]></content>
    
    <summary type="html">
    
      Typescript 2.1 introduced lookup types. What are they for? In which cases are they useful?
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://alexjoverm.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Apollo, GraphQL, Vue and Nuxt shenanigans!</title>
    <link href="http://alexjoverm.github.io/2017/03/23/Apollo-GraphQL-and-Nuxt-shenanigans/"/>
    <id>http://alexjoverm.github.io/2017/03/23/Apollo-GraphQL-and-Nuxt-shenanigans/</id>
    <published>2017-03-23T09:46:07.000Z</published>
    <updated>2017-08-10T16:37:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>What could go wrong by building a hackaton project with <a href="http://dev.apollodata.com/" target="_blank" rel="external">Apollo</a>, <a href="http://graphql.org" target="_blank" rel="external">GraphQL</a>, <a href="https://vuejs.org/" target="_blank" rel="external">Vue</a> and <a href="https://nuxtjs.org/" target="_blank" rel="external">Nuxt</a>?</p><a id="more"></a><img src="/2017/03/23/Apollo-GraphQL-and-Nuxt-shenanigans/hackaton.jpg" alt="Hackaton" title="Hackaton"><p>Last Friday 17th March 2017, <a href="https://twitter.com/josepramon" target="_blank" rel="external">@josepramon</a>, <a href="https://twitter.com/esclapes" target="_blank" rel="external">@esclapes</a> and I participated together in an internal hackaton of <a href="https://www.coosto.com/en/" target="_blank" rel="external">Coosto</a>. The topic was to create something with the topic “Eindhoven”. It was nice to see the variety of projects presented.</p><p>We wanted to play with <a href="http://dev.apollodata.com/" target="_blank" rel="external">Apollo</a>, <a href="http://graphql.org" target="_blank" rel="external">GraphQL</a>, and server-side rendering in <a href="https://vuejs.org/" target="_blank" rel="external">Vue</a> (with <a href="https://nuxtjs.org/" target="_blank" rel="external">Nuxt</a>), to get a feeling on whether it is beneficial to introduce them in the company. So we made <a href="https://github.com/esclapes/coosto-hackathon" target="_blank" rel="external">Dog shit</a>, an app that collects data from <a href="https://data.eindhoven.nl/pages/home/" target="_blank" rel="external">Eindhoven Open Data</a> and <a href="https://developers.google.com/places" target="_blank" rel="external">Google Places API</a> in order to show places in Eindhoven where you can walk your dog, and what’s around.</p><p>You can find the result <a href="https://github.com/esclapes/coosto-hackathon" target="_blank" rel="external">project on Github</a>. It has the following architecture:</p><img src="/2017/03/23/Apollo-GraphQL-and-Nuxt-shenanigans/diagram.jpg" alt="Dog Shit architecture" title="Dog Shit architecture"><p><em>Note: opinions in the article are personal and based on this experienced</em></p><h3 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h3><p><strong><a href="http://graphql.org" target="_blank" rel="external">GraphQL</a></strong> is a query language spec that Facebook developed on 2012. It serves exactly one purpose, and it does it really well:</p><blockquote><p>I’ll give the frontend what it’s asking for, and I’ll take care of getting that data in the best way</p></blockquote><p>It definitely nails that, we were amazed by how powerful is that and how pleasant the developer experience was. GraphQL:</p><ul><li>Gives you <strong>introspection</strong> and <strong>docs</strong>, given the Json/TypeScript-like language nature. It has a <a href="http://graphql.org/learn/serving-over-http/#graphiql" target="_blank" rel="external">GraphiQL</a> playground system where you can try your queries and see what they expect and return, powerful for development and testing.</li><li>There are <a href="http://graphql.org/code/" target="_blank" rel="external">implementations for most of languages</a></li><li>Optimized and scalable for that purpose, offering caching and pagination among others.</li></ul><p>GraphQL is an intermediate layer between your frontend and your backend. That has some <strong>advantages</strong>:</p><ul><li>You can query/return different data for different frontends. Imagine: your mobile app probably needs less data than your web app, or it needs it with another structure</li><li>Helps refactoring legacy systems or moving to microservices, since it acts as a <a href="http://samnewman.io/patterns/architectural/bff/" target="_blank" rel="external">BFF</a> and takes on some responsibilities of an <a href="http://microservices.io/patterns/apigateway.html" target="_blank" rel="external">API Gateway</a> to decouple frontend and backend</li></ul><p>It is the perfect replacement for traditional homemade BFFs, so you don’t have to:</p><ul><li>Build a BFF per frontend (GraphQL allows you to query the data you want)</li><li>Define hard-contracts between frontend and backend which you have to maintain (unless you build an spec/convention, which would mean building GraphQL from scratch on your own)</li><li>Optimize it for the purpose (GraphQL is made for that)</li></ul><h3 id="Apollo"><a href="#Apollo" class="headerlink" title="Apollo"></a>Apollo</h3><p>Here again, the experience was quite positive, it complements GraphQL with everything you need.</p><p>Apollo is a production ready toolset that powers-up GraphQL. It gives you:</p><ul><li><a href="http://dev.apollodata.com/" target="_blank" rel="external">GraphQL clients</a> for Android, iOS, Javascript, React, Angular…</li><li><a href="http://dev.apollodata.com/tools/#GraphQL-server-amp-tools" target="_blank" rel="external">A production-ready server</a> which extends <a href="http://graphql.org/graphql-js/" target="_blank" rel="external">GraphQL.js server</a></li><li><a href="http://dev.apollodata.com/tools/#GraphQL-server-amp-tools" target="_blank" rel="external">Subscriptions</a>, useful for real-time events. This feature feels like still needs some love by the date of writing.</li></ul><p>One note, the docs were a bit misleading, not by content but more about the structure. For example if was hard to find a simple get started or docs for the apollo client.</p><p>We tried <a href="https://github.com/Akryum/vue-apollo" target="_blank" rel="external">vue-apollo</a>, but we didn’t have good experience with it. It is quite opinionated and does some magic, but you lose a lot of control. For our case the <a href="https://github.com/apollographql/apollo-client" target="_blank" rel="external">Apollo Javascript client</a> worked better.</p><h3 id="Nuxt"><a href="#Nuxt" class="headerlink" title="Nuxt"></a>Nuxt</h3><p>We felt the power and easyness of Nuxt, but also we got a sour-sweet experience here, let me elaborate on that.</p><p><a href="https://nuxtjs.org/" target="_blank" rel="external">Nuxt</a> is a higher-level framework for writing universal Vue applications. It makes very easy to achieve server side rendering and you don’t have to worry about any of the <a href="https://vuejs.org/v2/guide/ssr.html#Build-Process-Routing-and-Vuex-State-Hydration" target="_blank" rel="external">server side rendering considerations</a> such as caching, routing, state, build process, etc. It is driven by conventions which is what makes very easy to don’t care about most things an let the framework manage that.</p><p>Those conventions have their pitfalls: when you need something more flexible and more control that you cannot fit to those conventions, then it is not the right tool for you. In our case this is true.</p><p>The bottom line is if you can stick to the conventions, is perfect for you. Otherwise you must manage the server side rendering yourself. In the <a href="https://vuejs.org/v2/guide/ssr.html#Build-Process-Routing-and-Vuex-State-Hydration" target="_blank" rel="external">Vue docs</a> you can find some resources to master this for complex applications.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>There are some areas that we didn’t have time for it, such as integrating a state management tool (Redux or Vuex), so we covered the basics in this experiment.</p><p>We found Apollo/GraphQL as a very powerful tool for medium and large apps, it does really well what is made for. Nuxt makes building universal Vue apps be a kid game, but first check if it fits properly with your project. Tools that strongly integrate technologies, such as vue-apollo or Nuxt itself, have their advantages, but first check if they are the best solution for your case. If not, you can always use the “raw” tools.</p>]]></content>
    
    <summary type="html">
    
      What could go wrong by building a hackaton project with Apollo, GraphQLhttp://graphql.org, Vue and Nuxt?
    
    </summary>
    
    
      <category term="GraphQL" scheme="http://alexjoverm.github.io/tags/GraphQL/"/>
    
      <category term="Apollo" scheme="http://alexjoverm.github.io/tags/Apollo/"/>
    
      <category term="VueJS" scheme="http://alexjoverm.github.io/tags/VueJS/"/>
    
  </entry>
  
  <entry>
    <title>Tree shaking with Webpack 2, TypeScript and Babel</title>
    <link href="http://alexjoverm.github.io/2017/03/06/Tree-shaking-with-Webpack-2-TypeScript-and-Babel/"/>
    <id>http://alexjoverm.github.io/2017/03/06/Tree-shaking-with-Webpack-2-TypeScript-and-Babel/</id>
    <published>2017-03-06T09:37:33.000Z</published>
    <updated>2017-08-06T12:55:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>We’ll see here how to setup <a href="https://webpack.js.org" target="_blank" rel="external">Webpack 2</a>, along with <a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a> and <a href="https://babeljs.io/" target="_blank" rel="external">Babel</a> to achieve dead code elimination with tree-shaking.</p><a id="more"></a><p>Some time ago I updated <a href="https://github.com/alexjoverm/typescript-library-starter" target="_blank" rel="external">typescript-library-starter</a>, a zero-config starter repo for writting a <a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>  library, with <a href="https://webpack.js.org/guides/tree-shaking" target="_blank" rel="external">tree-shaking</a>, <a href="https://github.com/babel/babel-preset-env" target="_blank" rel="external">babel-preset-env</a>, and more:</p><div class="twitter-wrapper"><blockquote class="twitter-tweet"><a href="https://twitter.com/alexjoverm/status/838681719993663488" target="_blank" rel="external"></a></blockquote></div><script async defer src="//platform.twitter.com/widgets.js" charset="utf-8"></script><p>Right now it uses RollupJS, but same concepts apply. So I thought, why not sharing that to the people? Hope you find it useful and safes you some time I had to spend :)</p><h2 id="What-is-really-tree-shaking"><a href="#What-is-really-tree-shaking" class="headerlink" title="What is really tree-shaking?"></a>What is really tree-shaking?</h2><img src="/2017/03/06/Tree-shaking-with-Webpack-2-TypeScript-and-Babel/tree.jpeg" alt="Tree" title="Tree"><p>Tree shaking is an algorithm introduced first by <a href="http://rollupjs.org/" target="_blank" rel="external">RollupJS</a> and also implemented by <a href="https://webpack.js.org/guides/tree-shaking" target="_blank" rel="external">Webpack 2</a> that removes any unused code when bundling your code. It relies on ES2015 modules in order to achieve that.</p><p>Let’s see an example. You have a file <code>greetings.js</code>:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* greetings.js */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Bye'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>Which you import in your <code>index.js</code>:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* index.js */</span><span class="token keyword">import</span> <span class="token punctuation">{</span> sayHello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./greetings'</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>We can see that <code>sayBye</code> is not used. When using tree-shaking, that code will be removed from the final bundle. Otherwise it will be included even if it’s not used.</p><h2 id="Why-Typescript-Babel"><a href="#Why-Typescript-Babel" class="headerlink" title="Why Typescript + Babel?"></a>Why Typescript + Babel?</h2><p>You have a good explanation in the <a href="https://github.com/alexjoverm/typescript-library-starter#why-using-typescript-and-babel" target="_blank" rel="external">typescript-library-starter repo</a>.</p><h2 id="Cool-show-me-how-to-do-it"><a href="#Cool-show-me-how-to-do-it" class="headerlink" title="Cool, show me how to do it!"></a>Cool, show me how to do it!</h2><p>As mentioned, tree-shaking relies on <strong>ES2015 modules</strong>, so we need to make sure we use them. For that:</p><ul><li>Use ES2015 in TypeScript</li><li>Use ES2015 modules in Babel</li><li>Just run <code>webpack -p</code> (production mode) and that should be it</li></ul><h3 id="1-Use-ES2015-in-TypeScript"><a href="#1-Use-ES2015-in-TypeScript" class="headerlink" title="1. Use ES2015 in TypeScript"></a>1. Use ES2015 in TypeScript</h3><p>You need to set <code>&quot;target&quot;: &quot;es2015&quot;</code> in <code>tsconfig.json</code> file. Note that is <strong>not necessary</strong> to set <code>&quot;module&quot;: &quot;es2015&quot;</code>.</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>        <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es2015"</span><span class="token punctuation">,</span>        <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"es2016"</span><span class="token punctuation">,</span> <span class="token string">"dom"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        ...    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>More info in <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="external">compiler options TypeScript page</a>.</p><h3 id="2-Use-ES2015-modules-in-Babel"><a href="#2-Use-ES2015-modules-in-Babel" class="headerlink" title="2. Use ES2015 modules in Babel"></a>2. Use ES2015 modules in Babel</h3><p>I’d strongly suggest you using <a href="https://github.com/babel/babel-preset-env" target="_blank" rel="external">babel-preset-env</a>. By far the most flexible and useful <a href="https://babeljs.io/" target="_blank" rel="external">Babel</a> preset :)</p><p>Anyways, whatever preset you use, you must indicate <code>module: false</code> in your <code>.babelrc</code> file:</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"browsers"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"last 2 versions"</span><span class="token punctuation">,</span> <span class="token string">"safari >= 7"</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="3-Let’s-see-the-results"><a href="#3-Let’s-see-the-results" class="headerlink" title="3. Let’s see the results"></a>3. Let’s see the results</h3><p>Now, when you have your <code>webpack.config.js</code> setup, if you run <code>webpack</code>, you’ll see within the generated output an unused harmony comment, like:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token comment" spellcheck="true">/* unused harmony export sayBye */</span><span class="token comment" spellcheck="true">/* harmony export (immutable) */</span> __webpack_exports__<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> sayHello<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// This function isn't used anywhere</span><span class="token keyword">function</span> <span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Bye'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">...</span></code></pre><p>And if we run <code>webpack -p</code> for production build, that code will be stripped out. To check that you can search for the string <code>&#39;Bye&#39;</code> on the generated output. It shouldn’t be there.</p><h2 id="Try-it-yourself"><a href="#Try-it-yourself" class="headerlink" title="Try it yourself!"></a>Try it yourself!</h2><p><a href="https://github.com/alexjoverm/typescript-library-starter" target="_blank" rel="external">typescript-library-starter</a> uses tree-shaking! Download the repo, follow the instructions and, be curious and try the code we used at the beginning of this article! Right now it uses RollupJS, but same tree-shaking happens when you run <code>npm run build</code>. If you wanna check the Webpack version, check out <a href="https://github.com/alexjoverm/typescript-library-starter/tree/edd71c19b8d1dcd0b42dc19e0e4ee4b8a7216250" target="_blank" rel="external">this commit</a> in particular to see how it was.</p>]]></content>
    
    <summary type="html">
    
      We&#39;ll see here how to setup Webpack 2, along with TypeScript and Babel to achieve dead code elimination with tree-shaking
    
    </summary>
    
    
      <category term="Webpack" scheme="http://alexjoverm.github.io/tags/Webpack/"/>
    
      <category term="TypeScript" scheme="http://alexjoverm.github.io/tags/TypeScript/"/>
    
  </entry>
  
</feed>
